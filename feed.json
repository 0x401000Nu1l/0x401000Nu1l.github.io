{
    "version": "https://jsonfeed.org/version/1",
    "title": "你越安静,你能听到的就越多",
    "subtitle": "",
    "icon": "https://0x401000nu1l.github.io/images/favicon.ico",
    "description": "(σﾟ∀ﾟ)σ..:*☆哎哟不错哦",
    "home_page_url": "https://0x401000Nu1l.github.io",
    "items": [
        {
            "id": "https://0x401000nu1l.github.io/2022/04/29/%E5%B7%A6%E8%BD%AC/",
            "url": "https://0x401000nu1l.github.io/2022/04/29/%E5%B7%A6%E8%BD%AC/",
            "title": "左转",
            "date_published": "2022-04-29T02:36:43.000Z",
            "content_html": "<h1 id><a class=\"anchor\" href=\"#\">#</a> </h1>\n<p>资本的复兴和脑力无产者的左转 -- 佐伊 23</p>\n<p>2020 年是一个特殊的年份，它是脑力无产者明显左转的一年（转向批评资本主义），也是体力无产者明显感受到危机的第一年。</p>\n<p>自从 1978 年以来，中国资本的发展经历了三个大的阶段，与之相伴的是，资本家的地位和劳动者的意识也经历了三个阶段。<br>\n1978-1992<br>\n 这是中国资本发展的第一个阶段。在这个阶段，资本从无到有被召唤出来，并在全国范围建立了统一的商品市场、劳动力市场和金融体系。</p>\n<p>1978 年之前，成为一个资本家去剥削工人不仅是可耻的，而且是非法的。改革开放之后，第一批资本家（最初还只是城乡个体户）就是在这样的社会环境中成长起来的。</p>\n<p>1981 年，一个问题在党内引发激烈讨论，社会主义制度下出现的私人雇工算不算剥削。争论不休之下，最后给了一个似而非的结论，雇工不超过 8 人就不算剥削，超过 8 人就是剥削。但是资本的发展是迅猛的，8 人的限制迅速就被打破。</p>\n<p>1983 年 1 月，中央对超出 8 人的雇工提出 “三不” 原则：“不宜提倡，不要公开宣传，也不要急于取缔。” 在这样暧昧不清的环境中，资本迅速发展，资本家作为一个阶级重新出现在华夏大地这片工农故土之上。</p>\n<p>资本家在发家致富的同时，并没有相应的社会地位。他们不能进人大、不能进政协、不能入党，他们甚至对自己剥削工人而积攒的家底能不能保存下来都心里没底，毕竟，在十年前我党还要没收资本家的财产。</p>\n<p>在城市中，工人阶级还有铁饭碗，而那些今天发家致富的资本家，昨天还只是返城没有工作的知情、游手好闲的二流子、以及其他形形色色被无产阶级看不上的人。对这些发了财的资本家，无产阶级在羡慕中又流露出鄙夷，“不就有两个臭钱吗，国家过两天就给你没收了。”</p>\n<p>在农村里，第一批农民工已经出现。社会主义时期的社队企业，在人民公社解体后改了个名字叫做 “乡镇企业”，这些乡镇企业被承包给各种 “能人” 开始了资本化的发展。本地农民成了乡镇企业雇工主要的产业后备军，这些农民除了从事农业生产外，还在自己所在乡镇的企业做兼职工作，他们同时从事工业和农业，显著特征就是 “离土不离乡”。</p>\n<p>国家到底会不会没收财产？是不是把资本家养肥了又宰掉？很多资本家自己心里都没底。为了给资本家安心，1987 年，总设计师曾有一次讲话，他意味深长的说，“现在我们国内人们议论雇工问题，我和好多同志谈过，犯不着在这个问题上表现我们在‘动’，可以再看几年。” 当然，为了减小阻力，总设计师又安慰那些还坚持传统的老干部说，“现在的雇工大致上只是小企业和农村已经承包的农民，雇工人数同全国一亿多职工相比，数目很小。从全局看，这只不过是小小的一点。要动也容易，但是一动就好像政策又在变了。动还是要动，因为我们不搞两极分化。但是，在什么时候动，用什么方法动，要研究。” 然而，这一研究就是数十年。</p>\n<p>1988 年，在资本发展了将近十年之后，在资本家已经成为了一个新兴的阶级之后，在农民工重新出现之后，在城市工人尚在梦中仍能分房的时候，在大学生还是天之骄子能够获得国家干部身份的时候，全国人大修宪了。私营经济终于获得了法律认可。</p>\n<p>这是两个时代转轨的衔接点，从计划到市场，从社会主义到资本体制，从劳动人民当家做主到资本家重回庙堂。</p>\n<p>在这个衔接点上，资本家除了钱更多一点之外，他还没有获得相应的地位。他不仅不能入人大政协，就连他的子女进入大学的机会也比不上工农子弟，当然，更比不上国家干部。下面这张图就是其他社会群体子女进入大学的几率与资本家群体的比值，1982 年，城市工人子女上大学的几率是资本家的 3.23 倍，农民子女上大学的几率是资本家的 2.13 倍。1990 年，城市工人工人子女上大学的几率是资本家的 10.78 倍，农民子女上大学的几率是资本家的 6.22 倍。</p>\n<p>而这一切，在 1992 年之后，彻底改变了。<br>\n1992-2008<br>\n 这是资本发展的第二个阶段。南巡拉开了这个阶段的帷幕，指明了资本发展的方向，终结了姓社姓资的讨论，为资本重新跃马扬鞭在华夏大地上纵横驰骋扫清了障碍。</p>\n<p>这个阶段有多个标志性事件，其中，1993 年底夺去 87 个女工生命的致丽大火最让人悲痛不已。这把火宣告着资本对劳工的统治重新建立起来了，自此之后数十年间，劳工只能在资本的铁蹄下卑微地活着，或者卑微地死去。</p>\n<p>低廉的工价，极度宽松的招商环境，大量受过教育的工人，完善的建基设施，以及全行业的产业链，这一切，使得中国成了资本升值的天堂。资本快速的发展着。</p>\n<p>1992 年之前的资本，除了少数红顶商人之外，多数就是个体户和农村 “能人”。1992 年之后，大量体制内人员下海，大量国企干部收购国企从管理层变为所有者。1997-1998 的私企普查，干部下海由于掌握更多社会资源，纯利润是平均数的 1.9 倍。</p>\n<p>这个阶段，大量灰色交易和违法行为出现，据戴建中估计，1989 到 1998 年间，私企偷税漏税超过 2700 亿元，大致占这些年间财政收入的 5%。</p>\n<p>老板钱更多了，地位也更稳了。2001 年七一讲话提到，私营企业主等人 “通过诚实劳动和工作，通过合法经营，为发展社会主义社会的生产力和其他事业作出了贡献。他们与工人、农民、知识分子、干部和解放军指战员团结在一起，他们也是有中国特色社会主义事业的建设者”，如果这些人 “承认党的纲领和章程、自觉为党的路线和纲领而奋斗、经过长期考验、符合党员条件”，则应该将他们 “吸收到党内来”。从这一年开始，资本家得以加入共产党，剥削者在党的组织中也合法了。老板们不仅仅能够入党，还渗入各级人大、政协参政议政。</p>\n<p>越是大资本家，越是追求政治地位，积极入党，甚至本身就是党员经商。《全国工商联上规模民营企业调研分析报告》（2000~2014 年）做过一次调查，基本情况如下表。<br>\n1、规模以上私营企业的所有者界定为大资本家。2、在中小企业主中，按照国家统计局的相关标准，将工业营业额不超过 3000 万元和其他行业不超过 1000 万元的企业拥有者界定小资本家。3、其余为中型资本家。</p>\n<p>在城市中，免费分房和福利医疗都没了，国企改制终结了工人铁饭碗的梦。在国企工人没落的同时，新生代农民工成了无产阶级的主体，特别是在我国加入 WTO 之后，农民工数量更是突飞猛进。2003-2008 年，全国外出农民工每年增长 600 万到 800 万人。这批人，不知福利分房为何物，不知免费医疗为何物，他们成长在改开的年代，工作在资本的工厂，从来都认为被剥削压迫是天经地义理所当然，这是一次重要的意义非凡的血液的替换，清洗掉了曾经的记忆，为资本进一步在意识形态上获得统治地位打下基础。</p>\n<p>在农村中，小农经济在短暂的复苏后开始出现问题，三农问题的焦虑成了上个世纪末集体的记忆。但是，农民问题在中国加入 WTO 后迅速让位，因为农村中大部分青壮年流入城市，农村以这样的方式逐步枯萎，农村问题以这样的方式渐渐淡出人们的视线。</p>\n<p>此时，资本家和工农子弟的差距终于拉开了。不论在财富上、地位上或者社会声望上。资本已经完全合法，没有人再讨论雇工几人才算剥削，剥削嘛，你不剥削，别人就剥削，剥削你是给你工作机会，你要感恩才是。2005 年后，曾有人借国企管理层肆意 MBO 之际攻击资本家，揭露他们那些见不得人的老底，要清洗他们的原罪。但是主流舆论不理不睬，甚至有学者建议豁免所有资本家的原罪，因为如果要追究，大部分资本家都有罪。</p>\n<p>资本大踏步的前进，工农再次匍匐在地，就在资本与工农的中间，一个新兴的群体出现了。这个群体是随着中国城镇化、资本全球化以及新兴互联网行业的出现而壮大的，他们以专业技术人员和管理人员为主。他们从事着法律、会计、金融、管理以及各种各样的科研技术工作。他们中的一部分人，或者是由于在部门中占据管理职能，或者是掌握了较强的技术因此具有一定的不可替代性，或者是由于身处垄断行业，能在资本剥削劳动力的体制中，比普通劳动者拥有更好的工作环境、更大的组织生产的权力，因而也能获得更高的薪酬，这批人是新兴小资产阶级（教授、高中特级教师、部门经理、部分金融从业人员、大公司工程师、部分互联网从业人员等等）。他们中的另一批人，从事着低端的技术工作或底层的管理工作，拿些微薄的仅仅比体力无产者稍多的薪水，这些人是典型的脑力无产者（外包程序员、金融行业底层人员、部门办事员、中小学老师、公司技术员等等）。</p>\n<p>在资本快速发展的时候，新兴的小资产阶级在高声欢呼。他们诅咒那个计划的时代，他们和主流一起歌颂这个冉冉兴起的盛世，他们为资本的每一次前行激动不已，肥得流油的资本总能滴下几滴油喂饱他们不大的野心。</p>\n<p>脑力无产者仍有希望上升为新兴的小资产阶级，他们和新兴小资产阶级在同一间办公室办公，在同一个餐桌吃饭，有着类似的背景，聊着相同的话题。因此，他们也具有类似的意识形态。他们崇尚竞争，相信靠自己的努力能改变命运，他们喝着老板的鸡汤、看着成功学的视频、听着马云的演讲、畅想着美好的未来。</p>\n<p>与资本在精神上以及一定程度也在利益上结盟的新兴小资产阶级，以及被新兴小资产阶级小康般生活吸引的脑力无产者，构成了知乎等新媒体上最初的用户群体。这个群体当然也在新兴的知乎等媒体上，用符合资本要求的话语回答着、讨论着各种问题。<br>\n2008 至今<br>\n这是资本发展的第三个阶段，这是资本盛极而衰的阶段。</p>\n<p>在这个阶段的初期，资产阶级变得更强大了。中国资本依靠举国体制和凯恩斯主义实现弯道超车，一举成为全球第二大经济体。而中国的垄断资本更是一举超过英德日法，成为全球第二，世界 500 强的数量从 2007 年的 30 个，飙升至 2015 年的 106 个。<br>\n资本家除了更有钱之外，还更深地进入社会管理领域。我们看第九届（1998）和第十一届（2008）全国人大代表构成，资产阶级成了除国家机关工作人员之外最大的群体。他们是由房地产商、工商业巨头、互联网贵族以及各地富豪构成的，他们是人们口中的大老板、大富豪。他们仅占人口中的极少部分，但在全国人大代表中占比 2 成左右。至于表格中的专业人士群体，是由演艺界明星、金融大佬、知名运动员、律所合伙人等所谓精英构成的，他们多数人事实上也是资本家。<br>\n九届人大构成<br>\n十一届人大构成<br>\n在这个阶段，农民作为一个阶级在快速没落。青壮年转移使得农村成了 993861 部队，即 99 重阳的老人，38 妇女的女性，61 儿童的小孩。当前农村中，纯务农或以务农为主，多曾经在外打工数年，由于年龄等原因无法继续打工才回乡务农。按《当代中国阶级阶层变动》系列报告所述，纯务农者，“他们中有 67.91% 的人曾是雇员或是工薪收入者，也就是打过工，最后才回归到农村务农，大部分是年纪大了回到农村务农。” 小农作为一个群体必然在市场经济中消亡，这是难以避免的。</p>\n<p>在这个阶段，还有两个重要的矛盾在快速发展，这对中国产生了深刻的影响。</p>\n<p>其一，中国资本的快速发展使得国内市场越来越狭窄了，过剩资本不断对外输出，2012 年之后的再一次过剩加速了资本的输出，从 2014 年起，中国成为了资本净输出国。而全世界的市场是有限的，中国输出的资本必然和英法美德意日等老牌帝国主义产生竞争，导致这些国家的垄断利润下滑，这是美国垄断资产阶级不愿意看到的。事实上，从 2012 年奥巴马亚太再平衡战略起，美国就明确了遏制中国资本的策略，这一方针在特朗普政府被公开化。</p>\n<p>其二，工人阶级自发的抗争越来越多，在抗争的推动下，他们实际工资有了一个快速增长的阶段。这个阶段大致是从 2003-2015，其中 2010 年前后增长最快。这使得资本眼中的 “成本” 越来越高，低端产业的利润越来越低。<br>\n资本主义的基本矛盾在上述两个矛盾的影响下发展得更快了，大规模的产能过剩使得中国 GDP 增长率从 2013 年开始断崖式下滑，经济进入了一个被称为 “新常态” 的时期。为了保住经济，我国分别在 2009 年和 2014 年进行了两次大规模的刺激政策，伴随着刺激政策的深化，房价终于上天。</p>\n<p>买了房的新兴小资产阶级仍然在欢呼着盛世，没有买房的小资产阶级以及广大的脑力无产者开始望房兴叹。伴随着利润的下滑，资本对他们的压榨似乎变得更重一些了，伴随着房价的上涨，资本带给他们的希望明显变得更为渺茫。</p>\n<p>2018 年以来，内外部矛盾都更多了。吃饭的时候，那些明显不关心社会话题的人，也开始谈论社会问题，有些是因为彩礼引起的，有些是因为工资引起的，有些是因为房价引起的，有些是因为被优化引起的，所有的都是因为在资本的体制下生存的压力引起的。</p>\n<p>还是这么一群人，还是在知乎等新媒体上面，曾经，他们为资本的发展鼓与呼，现在，他们开始自发地咒骂着资本。</p>\n<p>而这群人有一个全世界任何地方都不具备的特点，他们是在历史唯物主义的教育中长大的。不论他们读书的时候是否认可 “阶级”、“剥削”、“剩余价值” 这类概念及其内涵，他们都曾被广泛地灌输这类意识。当资本高速发展可以些许惠及他们的时候，他们抛弃了这些概念，当资本不再能给他们带来希望而只会无情压榨他们的时候，这些概念在他们的脑海中回归了。他们开始用 “资本家” 称呼企业家，用 “剥削” 描述企业家，用 “阶级” 审视企业家。</p>\n<p>他们中的一部分人开始左转，在网上自发地宣传着曾经在课本上学得的知识，剥削，阶级，资本家，剩余价值。他们中的一少部分人甚至开始自己花时间学习着各种课本上不曾涉及的知识，毛选，马恩选集，列宁的书，以及那些被忽视或掩盖的历史。</p>\n<p>他们开始在网上论战，论战的对象是各种纯色或杂色的小粉红，各种精神或肉体的资本家，以及广大的在他们看来尚未觉醒的劳动者，当然，还有那些用马克思主义的词句包装起来的沙文主义者。</p>\n<p>2020 年突如其来的疫情把这一切又放大了，压迫似乎又重了一点点，房价似乎还是那么高，工作似乎更加不稳定了，美好的生活显得似乎更加渺茫。</p>\n<p>而那些企业家在几十年的高速发展中培养出的傲慢和残忍，一次次刺中他们的心。“996” 是福报，商业是公益，企业家还要给自己设立节日，企业家还要提案成立两年以内的企业不用遵守劳动法。</p>\n<p>这一切都促发了知乎群体在 2020 年对资本家态度的急剧转变。</p>\n<p>然而，这个群体毕竟只是劳动者中人数较少的一部分，广大的体力无产者还没有那么强的感受，他们本来工资就低，他们本来就不指望在大城市买房，他们本来就生活在底层，他们获取信息的渠道也更有限，他们抽象思考的能力也更差一些，他们似乎还没有多大变化。</p>\n<p>但是，体力无产阶级也在变化。工资赶不上物价，“2017 年这个单间 300 块，今年这个单间 550 块”，“我下班还要打一份临工，哪有时间休息”。他们的抱怨也多起来了。不仅如此，经济下滑，很多工人回到老家，这些回到老家的工人会失去收入，经济危机在预演了。</p>\n<p>2020 年是一个特殊的年份，它是脑力无产者明显左转的一年（转向批评资本主义），也是体力无产者明显感受到危机的第一年。</p>\n<p>风暴远远还没来，但是脑力无产者的左转释放了一个明显的信号，天边已经聚起了几朵乌云，雷声也若隐若现，敏锐的人甚至能看到那划破夜空的几道微弱的闪电，历史的辩证法携着天边的风暴以不可抵挡的趋势向我们奔来，而极少数敏锐的青年已经张开双臂准备拥抱它了</p>\n<p>转载于 佐伊 23</p>\n<p>资本的复兴和脑力无产者的左转</p>\n",
            "tags": []
        },
        {
            "id": "https://0x401000nu1l.github.io/2022/04/21/CTFshow%E5%8D%B7%E7%8E%8B%E6%9D%AFwp/",
            "url": "https://0x401000nu1l.github.io/2022/04/21/CTFshow%E5%8D%B7%E7%8E%8B%E6%9D%AFwp/",
            "title": "CTFshow卷王杯wp",
            "date_published": "2022-04-20T16:07:10.000Z",
            "content_html": "<h3 id=\"ctfshow-卷王杯-wp\"><a class=\"anchor\" href=\"#ctfshow-卷王杯-wp\">#</a> <strong>CTFshow 卷王杯 wp</strong></h3>\n<h4 id=\"简单的re\"><a class=\"anchor\" href=\"#简单的re\">#</a> 简单的 re</h4>\n<p><a href=\"%5Bctf.show%5D(https://ctf.show/challenges#%E7%AE%80%E5%8D%95%E7%9A%84re-1827)\">下载附件</a></p>\n<p>下载文件查看信息， **ELF,64 位，UPX 壳 **</p>\n<p>因为用的 wsl 环境，所以直接远程动态调试手动脱壳</p>\n<h5 id=\"记录一次脱壳\"><a class=\"anchor\" href=\"#记录一次脱壳\">#</a> 记录一次脱壳</h5>\n<p>使用 wsl&amp;windows 远程调试，wsl 的 ip 地址是一直在变化的，所以每次启动 wsl 时都得查看 wsl 的 ip 地址</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ifconfig</span></pre></td></tr></table></figure><p>然后启动 ida 目录下的 linux_server64，IDA 端开启动态调试</p>\n<p>因为直接启动程序显示跳飞，所以直接在第一个函数调用处下断点</p>\n<p><img data-src=\"image-20220421100430381.png\" alt=\"image-20220421100430381\">!</p>\n<p><img data-src=\"image-20220421100803203.png\" alt=\"image-20220421100803203\"></p>\n<p>遇到循环直接跳过， 下断点然后 F9</p>\n<p><img data-src=\"image-20220421100916353.png\" alt=\"image-20220421100916353\"></p>\n<p>接着一路 F8，</p>\n<p><img data-src=\"image-20220421101114688.png\" alt=\"image-20220421101114688\"></p>\n<p>到这里 F7 步入，进入该函数之后一路 F7，就能在函数末尾看到一个比较大的跳转</p>\n<p><img data-src=\"image-20220421101210954.png\" alt=\"image-20220421101210954\"></p>\n<p>运行到此处，然后查看 R15 的值</p>\n<p><img data-src=\"image-20220421101357347.png\" alt=\"image-20220421101357347\"></p>\n<p>指向 0x400A50, 继续执行</p>\n<p><img data-src=\"image-20220421102305963.png\" alt=\"image-20220421102305963\"></p>\n<p>到这里之后 F8 步过</p>\n<p><img data-src=\"image-20220421102344660.png\" alt=\"image-20220421102344660\"></p>\n<p>接着我们发现我们到了 OEP 的地址，也是之前堆栈中的地址。找到 OEP 后，用脚本将脱壳后的文件 dump 出来</p>\n<pre><code class=\"language-idc\">#include &lt;idc.idc&gt;\n#define PT_LOAD              1\n#define PT_DYNAMIC           2\nstatic main(void)\n&#123;\n         auto ImageBase,StartImg,EndImg;\n         auto e_phoff;\n         auto e_phnum,p_offset;\n         auto i,dumpfile;\n         ImageBase=0x400000;\n         StartImg=0x400000;\n         EndImg=0x0;\n         if (Dword(ImageBase)==0x7f454c46 || Dword(ImageBase)==0x464c457f )\n  &#123;\n    if(dumpfile=fopen(&quot;G:\\\\dumpfile&quot;,&quot;wb&quot;)) //这里的地址是dump出的文件保存地址\n    &#123;\n      e_phoff=ImageBase+Qword(ImageBase+0x20);\n      Message(&quot;e_phoff = 0x%x\\n&quot;, e_phoff);\n      e_phnum=Word(ImageBase+0x38);\n      Message(&quot;e_phnum = 0x%x\\n&quot;, e_phnum);\n      for(i=0;i&lt;e_phnum;i++)\n      &#123;\n         if (Dword(e_phoff)==PT_LOAD || Dword(e_phoff)==PT_DYNAMIC)\n                         &#123; \n                                 p_offset=Qword(e_phoff+0x8);\n                                 StartImg=Qword(e_phoff+0x10);\n                                 EndImg=StartImg+Qword(e_phoff+0x28);\n                                 Message(&quot;start = 0x%x, end = 0x%x, offset = 0x%x\\n&quot;, StartImg, EndImg, p_offset);\n                                 dump(dumpfile,StartImg,EndImg,p_offset);\n                                 Message(&quot;dump segment %d ok.\\n&quot;,i);\n                         &#125;    \n         e_phoff=e_phoff+0x38;\n      &#125;\n\n      fseek(dumpfile,0x3c,0);\n      fputc(0x00,dumpfile);\n      fputc(0x00,dumpfile);\n      fputc(0x00,dumpfile);\n      fputc(0x00,dumpfile);\n\n      fseek(dumpfile,0x28,0);\n      fputc(0x00,dumpfile);\n      fputc(0x00,dumpfile);\n      fputc(0x00,dumpfile);\n      fputc(0x00,dumpfile);\n      fputc(0x00,dumpfile);\n      fputc(0x00,dumpfile);\n      fputc(0x00,dumpfile);\n      fputc(0x00,dumpfile);\n\n      fclose(dumpfile);\n        &#125;else Message(&quot;dump err.&quot;);\n &#125;\n&#125;\nstatic dump(dumpfile,startimg,endimg,offset) \n&#123;\n        auto i;\n        auto size;\n        size=endimg-startimg;\n        fseek(dumpfile,offset,0);\n        for ( i=0; i &lt; size; i=i+1 ) \n        &#123;\n        fputc(Byte(startimg+i),dumpfile);\n        &#125;\n&#125;\n</code></pre>\n<p>在 OEP 处打开脚本 dump. 生成脱壳后的原文件</p>\n<h5 id=\"解题\"><a class=\"anchor\" href=\"#解题\">#</a> 解题</h5>\n<p><img data-src=\"image-20220421103801876.png\" alt=\"image-20220421103801876\"></p>\n<p>运行之后进入 IDA，查找字符串，到达主函数</p>\n<p><img data-src=\"image-20220421104756503.png\" alt=\"image-20220421104756503\"></p>\n<p>进入加密函数 ，、</p>\n<p><img data-src=\"image-20220421104943844.png\" alt=\"image-20220421104943844\"></p>\n<p><img data-src=\"image-20220421104954374.png\" alt=\"image-20220421104954374\"></p>\n<p>可以判断后面的 V14 数组大概率是密文，后面是判断，而前面的循环就是加密过程了，进入关键加密函数，发现是明显的 TEA 加密算法，所以直接可以写逆向脚本</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> delta <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">31</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        delta <span class=\"token operator\">+=</span><span class=\"token number\">0x6F361F7C</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> v14<span class=\"token punctuation\">[</span><span class=\"token number\">27</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    v14<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x507BC5BC</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x2B989A22</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x63A48F40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2831241988</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x7451189A</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x8A3E7CCF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x62CA9921</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xE1B5C82</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xC3965CA9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xD6268AA1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x22AC5103</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x9ACC9D7E</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x224A7DC3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xD588C510</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xCB432BE4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xB6A13511</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x4C3513DC</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x6FCEEBC1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xA3614D20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x87C441CC</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xA1F95799</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x3E6DD14A</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">22</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x6F28852F</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x52AC745F</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x9190AC59</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  v14<span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x16DE2CFB</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> v3<span class=\"token punctuation\">,</span>v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span><span class=\"token number\">124</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">26</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span> delta<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        v3 <span class=\"token operator\">=</span> v14<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        v4 <span class=\"token operator\">=</span> v14<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;=</span><span class=\"token number\">31</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            v4 <span class=\"token operator\">-=</span><span class=\"token punctuation\">(</span>v3<span class=\"token operator\">+</span>num<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v3<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v3<span class=\"token operator\">>></span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            v3 <span class=\"token operator\">-=</span><span class=\"token punctuation\">(</span>v4<span class=\"token operator\">+</span>num<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v4<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v4<span class=\"token operator\">>></span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            num <span class=\"token operator\">-=</span><span class=\"token number\">0x6F361F7C</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        v14<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>v3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        v14<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">25</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span>v14<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>output：ctfshow&#123;just_a_simple_re&#125;</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>*/</pre></td></tr></table></figure><p>所以最后的 flag 是</p>\n<blockquote>\n<p><strong>ctfshow{just_a_simple_re}</strong></p>\n</blockquote>\n<h4 id=\"babyoc\"><a class=\"anchor\" href=\"#babyoc\">#</a> babyOC</h4>\n<p>烷基八氮</p>\n<p>ubuntu 支持的 libgnustep-base 最高版本是 1.26，但是这个文件需要的版本是 1.28</p>\n<p>而且重要的<strong> Objective-C 使用动态运行时类型</strong>，在此基础上增加了<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklOUQlQTIlRTUlOTAlOTElRTUlQUYlQjklRTglQjElQTElRTclQkMlOTYlRTclQTglOEIlRTglQUYlQUQlRTglQTglODA=\">面向对象编程语言</span>的特性以及<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9TbWFsbHRhbGs=\"> Smalltalk</span> 消息机制</p>\n<p>这种消息特性决定逆向 objective-c 必须通过动态调试来得知函数的作用</p>\n<p>贴一个参考的大佬博客，也是该题一血</p>\n<p>[babyOC_wp](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnRyYWNrb255b3UudG9wLzIwMjEvMDYvMjYvYTFhYWI3OGRjNDE0Lw==\">「CTFSHOW」Rev 随缘更新 (trackonyou.top)</span>)</p>\n<p>使用 IDA</p>\n<p><img data-src=\"image-20220421231237984.png\" alt></p>\n<p>发现 objc_msg_lookup 函数 频繁出现</p>\n<p><img data-src=\"image-20220421234753880.png\" alt=\"image-20220421234753880\"></p>\n<p>大意就是接收参数，返回一个函数指针，个人猜测可能就是 objective-c 特有的 Smalltalk 消息机制，通过查看函数的第二个参数就能大概知道函数的作用，但是具体实现得通过动态调试分析</p>\n<p><img data-src=\"image-20220421235323032.png\" alt=\"image-20220421235323032\"></p>\n<p>查看 init xref 进入函数</p>\n<p><img data-src=\"image-20220421235408609.png\" alt=\"image-20220421235408609\"></p>\n<p>这里就是初始化的函数（加密）</p>\n<p>有两个大循环 ，应该是分别对奇数位和偶数位运算，具体运算还是得靠动态调试</p>\n<p>而且密文也得靠动态调试得到</p>\n<p>套用大佬的 keygen</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1270</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2767</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5549</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9672</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11938</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16093</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29864</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30379</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22184</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20690</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25002</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token number\">65039</span><span class=\"token punctuation\">,</span> <span class=\"token number\">65793</span><span class=\"token punctuation\">,</span> <span class=\"token number\">97983</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100411</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67904</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88053</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28147</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18776</span><span class=\"token punctuation\">,</span> <span class=\"token number\">71764</span><span class=\"token punctuation\">,</span> <span class=\"token number\">127654</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token number\">39994</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30276</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33151</span><span class=\"token punctuation\">,</span> <span class=\"token number\">49377</span><span class=\"token punctuation\">,</span> <span class=\"token number\">62682</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128398</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32406</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>key <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x4E1</span> <span class=\"token operator\">*</span> i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span><span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> data<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span><span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> data<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> key<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>output: ctfshow&#123;babyＯｂｊＣ,你真的解出来了TQL&#125;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>'''</pre></td></tr></table></figure><blockquote>\n<p><strong>ctfshow {babyＯｂｊＣ, 你真的解出来了 TQL}</strong></p>\n</blockquote>\n",
            "tags": [
                "Reverse_wp_ctfshow_卷王杯"
            ]
        },
        {
            "id": "https://0x401000nu1l.github.io/2022/04/20/starCTF%E9%80%86%E5%90%91wp/",
            "url": "https://0x401000nu1l.github.io/2022/04/20/starCTF%E9%80%86%E5%90%91wp/",
            "title": "starCTF逆向wp",
            "date_published": "2022-04-20T07:43:59.000Z",
            "content_html": "<h2 id=\"starctf-reverse-wirteup\"><a class=\"anchor\" href=\"#starctf-reverse-wirteup\">#</a> StarCTF Reverse wirteup</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hZHdvcmxkLnhjdGYub3JnLmNuL21hdGNoL2NvbnRlc3RfY2hhbGxlbmdlP2V2ZW50PTE4NCZhbXA7aGFzaD0zM2QxZWM5MS02YzFkLTRjMzMtOWZmMi01NThjODAyY2VkOTIuZXZlbnQ=\">赛题 - *CTF (xctf.org.cn)</span></p>\n<h4 id=\"simple-file-system\"><a class=\"anchor\" href=\"#simple-file-system\">#</a> Simple File System</h4>\n<p>观察压缩包各文件</p>\n<p><img data-src=\"image-20220420155056064.png\" alt=\"image-20220420155056064\"></p>\n<p>按照 instruction.txt 文件描述打开文件</p>\n<p><img data-src=\"image-20220420155341226.png\" alt=\"image-20220420155341226\"></p>\n<p>直接拖到 IDA 里面打开通过查找字符串进入主要函数</p>\n<p><img data-src=\"image-20220420160044266.png\" alt=\"image-20220420160044266\"></p>\n<p>找到关键词 &quot;plantflag&quot;, 之后进入 key_func 函数</p>\n<p><img data-src=\"image-20220420160244006.png\" alt=\"image-20220420160244006\"></p>\n<p>进入 get_flag 函数</p>\n<p><img data-src=\"image-20220420160323840.png\" alt=\"image-20220420160323840\"></p>\n<p>经典的加密函数，但是 v4 的值未知，而且密文也是未知，所以在这里采用动态调试获取</p>\n<p><img data-src=\"image-20220420162015950.png\" alt=\"image-20220420162015950\"></p>\n<p>运行之后查看 V5 的值发现是 flag 的格式，所以判定是将读入的值一步步加密，但是最后的密文在哪里呢，附件压缩包中有两个额外文件，打开查看</p>\n<p><img data-src=\"image-20220420164207583.png\" alt=\"image-20220420164207583\"></p>\n<p>其中一个文件是规定 flag 格式，另一个中有很多字段，继续动态调试执行加密步骤</p>\n<p><img data-src=\"image-20220420164325335.png\" alt=\"image-20220420164325335\"></p>\n<p>这是 V4 的值</p>\n<p><img data-src=\"image-20220420165155556.png\" alt=\"image-20220420165155556\"></p>\n<p>这是加密前几次后出现的前几位密文猜测密文应该是保存在 image.flag 文件中，所以直接在 image.flag 中查找</p>\n<p><img data-src=\"image-20220420165350483.png\" alt=\"image-20220420165350483\"></p>\n<p>果然查到了密文，将密文剪切出来然后写脚本逆向解密</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">decode2</span><span class=\"token punctuation\">(</span>flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    flag <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        v5 <span class=\"token operator\">=</span> flags<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        v5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v5<span class=\"token operator\">>></span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token punctuation\">(</span>v5<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span><span class=\"token number\">0xff</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        v5 <span class=\"token operator\">^</span><span class=\"token operator\">=</span> <span class=\"token number\">0xDE</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        v5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v5<span class=\"token operator\">>></span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token punctuation\">(</span>v5<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        v5 <span class=\"token operator\">^</span><span class=\"token operator\">=</span> <span class=\"token number\">0xED</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        v5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v5<span class=\"token operator\">>></span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token punctuation\">(</span>v5<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span><span class=\"token number\">0xff</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        v5 <span class=\"token operator\">^</span><span class=\"token operator\">=</span><span class=\"token number\">0xBE</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        v5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v5<span class=\"token operator\">>></span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token punctuation\">(</span>v5<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span><span class=\"token number\">0xff</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        v5 <span class=\"token operator\">^</span><span class=\"token operator\">=</span><span class=\"token number\">0xEF</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        v5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v5<span class=\"token operator\">>></span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span><span class=\"token punctuation\">(</span>v5<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span><span class=\"token number\">0xff</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        flag <span class=\"token operator\">+=</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>v5<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> flag</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>flag1 <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C:\\\\Users\\\\Ikhan\\\\desktop\\\\image.flag'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>decode2<span class=\"token punctuation\">(</span>flag1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>*CTF&#123;Gwed9VQpM4Lanf0kEj1oFJR6&#125;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>'''</pre></td></tr></table></figure><p>得到最后的 flag</p>\n<blockquote>\n<p>*<strong>CTF{Gwed9VQpM4Lanf0kEj1oFJR6}</strong></p>\n</blockquote>\n<h4 id=\"nacl\"><a class=\"anchor\" href=\"#nacl\">#</a> NaCl</h4>\n<p>进入 IDA</p>\n<p><img data-src=\"image-20220428204720717.png\" alt=\"image-20220428204720717\"></p>\n<p>条理很清楚，进入 encode () 函数</p>\n<p><img data-src=\"image-20220428204816137.png\" alt=\"image-20220428204816137\"></p>\n<p>逻辑太混乱了，准备动态调试看看，在 encode () 前面打断点，然后进入</p>\n<p><img data-src=\"image-20220428205208913.png\" alt=\"image-20220428205208913\"></p>\n<p><img data-src=\"image-20220428205226813.png\" alt=\"image-20220428205226813\"></p>\n<p>前后发现很反常的事情，不断地对 R15 寄存器进行运算，继续往下看，连续 jmp 了几个地址之后</p>\n<p><img data-src=\"image-20220428205430701.png\" alt=\"image-20220428205430701\"></p>\n<p>发现是出现了 jmp rdi 的操作<br>\n<strong> IDA 反汇编遇到 jmp  寄存器 这样的指令可能无法准确地反汇编</strong><br>\n btw，网上看了几位大佬的 wp 发现大佬们没去花指令的时候这一步 F5 不了，但是我没去花指令的情况下仍然是给 F5 出来了，但是有点逻辑混乱，可能是因为我的 IDA 版本更高点</p>\n<p>继续看关注 R15 寄存器，在 encode () 函数刚开始时执行了<br>\n<strong> sub   R15,28h</strong><br>\n 紧接着后面跳转的时候又拓展了 R15 附近的区域，将下面要跳转的函数执行完需要执行的地址放入 R15 附近的内存，并且跳转之后<br>\n **jmp rdi **<br>\n 这里 rdi 的取值是从 R15 附近取出来然后再赋给 RDI</p>\n<p><strong>所以，这里的 R15 充当的就是栈指针寄存器的作用，与此同时，前面不断地 jmp   地址</strong><br>\n<strong>就相当于 call，而后面的  jmp rdi 就相当于 retn</strong><br>\n 这个也算是一种花指令，现在写脚本 patch 源程序。<br>\n参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kMW5uM3IuZ2l0aHViLmlvLzIwMTkvMDYvMTAvSURBUHl0aG9uLw==\">大佬整理的 IDAPython 常用函数</span></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>start <span class=\"token operator\">=</span> <span class=\"token number\">0x807FEC0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>end <span class=\"token operator\">=</span> <span class=\"token number\">0x8080AD1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>address <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>callTarget <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"lea\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lea\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mov\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jmp\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>retnTarget <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"lea\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mov\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"and\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lea\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jmp\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">nop</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">&lt;</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tpatch_byte<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0x90</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\ts <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">turnCall</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\"># nop 掉 call 之前的值</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tnop<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tpatch_byte<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token number\">0xE8</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\"># 把后面的花指令去掉 重新计算去花长度</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\thuaStart <span class=\"token operator\">=</span> next_head<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\thuaEnd <span class=\"token operator\">=</span> h</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tnop<span class=\"token punctuation\">(</span>huaStart<span class=\"token punctuation\">,</span> huaEnd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">turnRetn</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tnop<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\"># 注意原来是 jmp xxx</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\"># 所以前面 nop 掉一个 后面改成 retn</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tpatch_byte<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token number\">0x90</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tpatch_byte<span class=\"token punctuation\">(</span>e <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>p <span class=\"token operator\">=</span> start</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">while</span> p <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\taddress<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\taddress<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> next_head<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\taddress<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> next_head<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\taddress<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> next_head<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\taddress<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> next_head<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> print_insn_mnem<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> callTarget<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tturnCall<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> get_operand_value<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tp <span class=\"token operator\">=</span> next_head<span class=\"token punctuation\">(</span>next_head<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> print_insn_mnem<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> retnTarget<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tturnRetn<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\tp <span class=\"token operator\">=</span> next_head<span class=\"token punctuation\">(</span>next_head<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tp <span class=\"token operator\">=</span> next_head<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>patch 之后保存修改后的文件，继续用 IDA 打开。<br>\n<img data-src=\"image-20220428211527538.png\" alt=\"image-20220428211527538\"></p>\n<p>进入 encode () 函数之后，继续创建一个结构体让程序更清楚一点，</p>\n<p><img data-src=\"image-20220428215634541.png\" alt=\"image-20220428215634541\"></p>\n<p>进入主要函数 <strong>sub_8080100</strong>, 继续创建结构体 (自创结构体)<br>\n 发现一共结构体一共 48 个字节，就可以看做是 12 个 int 或者 6 个 long，这里创建 12 个 int<br>\n 然后创建我们的结构体，发现界面会清楚一点，而且很容易看出来是 XTEA 加密</p>\n<p>但是经过了魔改，循环的轮数以及 delta 数值也发生了变化</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMucGVkaXkuY29tL3RocmVhZC0yNjY5MzMuaHRt\">TEA XTEA XXTEA 加密</span><br>\n<img data-src=\"image-20220428221544843.png\" alt=\"image-20220428221544843\"></p>\n<p>这里取 key 的操作学到了，先按 d 让单个元素的变成 8 位，然后再创建一个包含四个元素的数组，就能创建一个总共 32 位的数组。<br>\n<img data-src=\"image-20220428220355543.png\" alt=\"image-20220428220355543\"></p>\n<p>还有一个坑是<img data-src=\"image-20220428220439172.png\" alt=\"image-20220428220439172\"></p>\n<p>这里传入的 XTEA 每一步的循环的值都是变化的，但是经过计算就能得到循环值分别为  <strong>2  4  6   8</strong><br>\n<img data-src=\"image-20220428220817309.png\" alt=\"image-20220428220817309\"></p>\n<p>而且 xorkey 是可以通过动调获取的</p>\n<p>下一个函数就是简单的 memcpy () 函数，</p>\n<blockquote>\n<p>C 库函数 <strong>void *memcpy(void *str1, const void *str2, size_t n)</strong> 从存储区 <strong>str2</strong> 复制 <strong>n</strong> 个字节到存储区 <strong>str1</strong>。</p>\n</blockquote>\n<p><img data-src=\"C:%5CUsers%5CIkhan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220429171011925.png\" alt=\"image-20220429171011925\"></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>__int64 __fastcall <span class=\"token function\">XOR</span><span class=\"token punctuation\">(</span>__int64 input<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  __int64 v1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rbx</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  __int64 v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r13</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  __int64 v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r15</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  _QWORD <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r15</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  struct_v5 <span class=\"token operator\">*</span>v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r15</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ebx</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ebx</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  v4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v3 <span class=\"token operator\">-</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token operator\">*</span>v4 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  v5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v2 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>v4 <span class=\"token operator\">-</span> <span class=\"token number\">56</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  v5<span class=\"token operator\">-></span>input <span class=\"token operator\">=</span> input<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  v5<span class=\"token operator\">-></span>xorKey <span class=\"token operator\">=</span> <span class=\"token function\">sub_8080360</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  v5<span class=\"token operator\">-></span>input1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v2 <span class=\"token operator\">+</span> v5<span class=\"token operator\">-></span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  v5<span class=\"token operator\">-></span>highFour <span class=\"token operator\">=</span> <span class=\"token function\">Big</span><span class=\"token punctuation\">(</span><span class=\"token function\">HIDWORD</span><span class=\"token punctuation\">(</span>v5<span class=\"token operator\">-></span>input1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 高四位小端序放入</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  v5<span class=\"token operator\">-></span>lowFour <span class=\"token operator\">=</span> <span class=\"token function\">Big</span><span class=\"token punctuation\">(</span>v5<span class=\"token operator\">-></span>input1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 低四位小端序放入</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> v5<span class=\"token operator\">-></span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> v5<span class=\"token operator\">-></span>count <span class=\"token operator\">&lt;=</span> <span class=\"token number\">43</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>v5<span class=\"token operator\">-></span>count <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    v5<span class=\"token operator\">-></span>orgLowFour <span class=\"token operator\">=</span> v5<span class=\"token operator\">-></span>lowFour<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    v6 <span class=\"token operator\">=</span> <span class=\"token function\">ROL</span><span class=\"token punctuation\">(</span>v5<span class=\"token operator\">-></span>lowFour<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    v7 <span class=\"token operator\">=</span> <span class=\"token function\">ROL</span><span class=\"token punctuation\">(</span>v5<span class=\"token operator\">-></span>lowFour<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> v6<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    v5<span class=\"token operator\">-></span>lowFour <span class=\"token operator\">=</span> v5<span class=\"token operator\">-></span>highFour <span class=\"token operator\">^</span> v7 <span class=\"token operator\">^</span> <span class=\"token function\">ROL</span><span class=\"token punctuation\">(</span>v5<span class=\"token operator\">-></span>lowFour<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v2 <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> v5<span class=\"token operator\">-></span>count <span class=\"token operator\">+</span> v5<span class=\"token operator\">-></span>xorKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    v5<span class=\"token operator\">-></span>highFour <span class=\"token operator\">=</span> v5<span class=\"token operator\">-></span>orgLowFour<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  v5<span class=\"token operator\">-></span>input1 <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  v5<span class=\"token operator\">-></span>input1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v5<span class=\"token operator\">-></span>input1 <span class=\"token operator\">|</span> v5<span class=\"token operator\">-></span>lowFour<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> v5<span class=\"token operator\">-></span>highFour<span class=\"token punctuation\">;</span><span class=\"token comment\">// 低高互换</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">return</span> v5<span class=\"token operator\">-></span>input1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输入的 input 还要经过一个异或运算，再有结尾的高低 32 位转换<br>\n并且，后面是魔改的 XTEA</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>__int64 __fastcall <span class=\"token function\">XTEA</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span> __int64 a2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  __int64 v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r13</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  myst <span class=\"token operator\">*</span>v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r15</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  __int64 result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>t1 <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>                            <span class=\"token comment\">// 轮数为传入的轮数，分别是 2 4 8 16</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span>v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v0 <span class=\"token operator\">=</span> a2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span>v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>                           <span class=\"token comment\">//key 可以直接拿</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v0 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v2 <span class=\"token operator\">+</span> <span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span>v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v2 <span class=\"token operator\">+</span> <span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span>v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v0 <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>delta <span class=\"token operator\">=</span> <span class=\"token number\">0x10325476</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">//delta 数变了</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>t9 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>t9 <span class=\"token operator\">&lt;</span> v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>t1<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>t9 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v0 <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v1 <span class=\"token operator\">>></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token number\">16</span> <span class=\"token operator\">*</span> v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v1<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v2 <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span>v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                                                                      <span class=\"token operator\">+</span> v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum <span class=\"token operator\">+=</span> v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>delta<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v1 <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v0 <span class=\"token operator\">>></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token number\">16</span> <span class=\"token operator\">*</span> v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v0<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v2</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                                                                        <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum <span class=\"token operator\">>></span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                                                                        <span class=\"token operator\">+</span> <span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span>v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                                                                      <span class=\"token operator\">+</span> v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v2 <span class=\"token operator\">+</span> <span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span>v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v0<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  result <span class=\"token operator\">=</span> v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v2 <span class=\"token operator\">+</span> <span class=\"token operator\">*</span><span class=\"token operator\">&amp;</span>v3<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v0 <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最后贴出大佬的 wp</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">SHL</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFFFFFFFF</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> n <span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">ROTL</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">SHL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token punctuation\">(</span><span class=\"token number\">32</span> <span class=\"token operator\">-</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> xorKey<span class=\"token punctuation\">[</span><span class=\"token number\">44</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token number\">0x04050607</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00010203</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0C0D0E0F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x08090A0B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xCD3FE81B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xD7C45477</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x9F3E9236</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0107F187</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token number\">0xF993CB81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xBF74166C</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xDA198427</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1A05ABFF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x9307E5E4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xCB8B0E45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x306DF7F5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xAD300197</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token number\">0xAA86B056</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x449263BA</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x3FA4401B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1E41F917</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC6CB1E7D</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x18EB0D7A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xD4EC4800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xB486F92B</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token number\">0x8737F9F3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x765E3D25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xDB3D3537</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xEE44552B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x11D0C94C</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x9B605BCB</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x903B98B3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x24C2EEA3</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token number\">0x896E10A2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x2247F0C0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xB84E5CAA</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x8D2C04F0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x3BC7842C</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1A50D606</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x49A1917C</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7E1CB50C</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token number\">0xFC27B826</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x5FDDDFBC</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xDE0FC404</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xB2B30907</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">decipher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> num_rounds<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> <span class=\"token keyword\">const</span> key<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> v0<span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v1<span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> delta <span class=\"token operator\">=</span> <span class=\"token number\">0x10325476</span><span class=\"token punctuation\">,</span> sum<span class=\"token operator\">=</span>delta<span class=\"token operator\">*</span>num_rounds<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num_rounds<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        v1 <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v0 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>v0 <span class=\"token operator\">>></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v0<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">+</span> key<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">>></span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        sum <span class=\"token operator\">-=</span> delta<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        v0 <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>v1 <span class=\"token operator\">>></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">+</span> key<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>v0<span class=\"token punctuation\">;</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">XorRol</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token class-name\">uint32_t</span> encLow <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token class-name\">uint32_t</span> encHigh <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token class-name\">uint32_t</span> orgLow<span class=\"token punctuation\">,</span> orgHigh<span class=\"token punctuation\">,</span> v6<span class=\"token punctuation\">,</span> v7<span class=\"token punctuation\">,</span> v8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">43</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\torgLow <span class=\"token operator\">=</span> encHigh<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tv6 <span class=\"token operator\">=</span> <span class=\"token function\">ROTL</span><span class=\"token punctuation\">(</span>orgLow<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tv7 <span class=\"token operator\">=</span> <span class=\"token function\">ROTL</span><span class=\"token punctuation\">(</span>orgLow<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> v6<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tv8 <span class=\"token operator\">=</span> v7 <span class=\"token operator\">^</span> <span class=\"token function\">ROTL</span><span class=\"token punctuation\">(</span>orgLow<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\torgHigh <span class=\"token operator\">=</span> encLow <span class=\"token operator\">^</span> xorKey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> v8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tencHigh <span class=\"token operator\">=</span> orgHigh<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tencLow <span class=\"token operator\">=</span> orgLow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> orgLow<span class=\"token punctuation\">;</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> orgHigh<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"47\"></td><td><pre> </pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> v<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0xFDF5C266</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7A328286</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xCE944004</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x5DE08ADC</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xA6E4BD0A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x16CAADDC</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x13CD6F0C</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1A75D936</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> k<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0x03020100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x07060504</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0B0A0908</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0F0E0D0C</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token class-name\">uint32_t</span> teaData<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">//\tuint32_t testData[] = &#123; 0xD4C2E7AE, 0xD2E28713 &#125;;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">//\tXorRol(testData);</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">//\tprintf(\"0x%X, 0x%X, \", testData[0], testData[1]);</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token function\">decipher</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x%X, 0x%X, \"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\tteaData<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\tteaData<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token function\">XorRol</span><span class=\"token punctuation\">(</span>teaData <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token comment\">//\t\tprintf(\"0x%X, 0x%X, \", teaData[i * 2], teaData[i * 2 + 1]);</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>teaData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c%c%c%c\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以及出题人的出题思路</p>\n<blockquote>\n<h3 id=\"nacl-writeup\"><a class=\"anchor\" href=\"#nacl-writeup\">#</a> NaCl writeup</h3>\n<ol>\n<li>\n<p>main logic in  <code>src.c</code></p>\n</li>\n<li>\n<p>this challenge is likely Google Native NaCl project. It includes jump check, memory check and align check. But I alse replace the stack registers, use r15 to replace rsp, r14 to replace rbp. And here are no call, ret and leave. Here is only jmp. Access memory by adding r13 to get memory address.</p>\n</li>\n<li>\n<p>Moreover, i put the loader function and the native client binary together. the section SFI is NaCl's code, and SFI_DATA is data section.</p>\n</li>\n<li>\n<p>expected solution is as follows: firstly, dump section SFI and SFI_data. Then, you modify the binary by script code. you need to recover stack, register and instrcution call, ret, etc. Lastly, you can disassemble the new binary by ida or other tools. Then you can got simple logic.</p>\n</li>\n<li>\n<p>i am sorry that all players solved this challenge by dynamic debugging and static analysis of orginal assembly code. Because my hide logic code is short. So bad.</p>\n</li>\n</ol>\n</blockquote>\n",
            "tags": [
                "Reverse_wp_starCTF"
            ]
        },
        {
            "id": "https://0x401000nu1l.github.io/2022/04/19/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%B0%8F%E7%9A%84elf%E6%96%87%E4%BB%B6/",
            "url": "https://0x401000nu1l.github.io/2022/04/19/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%B0%8F%E7%9A%84elf%E6%96%87%E4%BB%B6/",
            "title": "史上最小的elf文件",
            "date_published": "2022-04-19T08:29:21.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://0x401000nu1l.github.io/2022/04/18/%E6%B1%87%E7%BC%96-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/",
            "url": "https://0x401000nu1l.github.io/2022/04/18/%E6%B1%87%E7%BC%96-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/",
            "title": "汇编语言中系统调用",
            "date_published": "2022-04-18T13:51:42.000Z",
            "content_html": "<p>W</p>\n<h1 id=\"linux系统调用\"><a class=\"anchor\" href=\"#linux系统调用\">#</a> linux 系统调用</h1>\n<h2 id=\"系统调用是用于用户空间和内核空间之间接口的api\"><a class=\"anchor\" href=\"#系统调用是用于用户空间和内核空间之间接口的api\">#</a> <strong>系统调用是用于用户空间和内核空间之间接口的 API</strong></h2>\n<h4 id=\"linux中使用系统调用\"><a class=\"anchor\" href=\"#linux中使用系统调用\">#</a> linux 中使用系统调用</h4>\n<p>可以在 linux 中使用系统调用，具体有一下步骤</p>\n<ul>\n<li>将系统调用号放在 EAX 寄存器中</li>\n<li>将参数存储在寄存器 EBX,ECX 等中的系统调用中</li>\n<li>调用相关的中断 (80h)</li>\n<li>结果通常在 EAX 寄存器中返回</li>\n</ul>\n<blockquote>\n<p>由六个寄存器存储所使用的系统调用的参数</p>\n<p>分别是 <strong>EBX,ECX,EDX,ESI</strong>,<strong>EDI</strong> 和<strong> EBP</strong></p>\n<p>这些寄存器采用连续参数，从 EBX 寄存器开始，如果有超过六个参数，则第一个参数的存储单元存储在 EBX 寄存器中</p>\n</blockquote>\n<p>下面举出系统调用 sys_exit 以及 sys_write 的例子</p>\n<pre><code class=\"language-assembly\">mov eax,1   ;system call number (sys_exit)\nint 0x80    ; call kernel\n</code></pre>\n<pre><code class=\"language-assembly\"> mov eax,4       ; message length\n mov ecx,msg     ; message to write\n mov ebx,1       ; file descriptor (stdout)\n mov eax,4       ; system call number (sys_write)\n int 0x80        ; call kernel \n</code></pre>\n<p>所有系统调用都列在 <em><strong>/user/include/asm/unistd.h</strong></em>  以及他们的编号（在调用 int 0x80 之前放入 eax 的值）</p>\n<p>常用的系统调用以及编号如下</p>\n<p><img data-src=\"image-20220418225625486.png\" alt=\"image-20220418225625486\"></p>\n",
            "tags": [
                "Assembly Language"
            ]
        },
        {
            "id": "https://0x401000nu1l.github.io/2022/04/16/CTFshow36D%E6%9D%AFwp/",
            "url": "https://0x401000nu1l.github.io/2022/04/16/CTFshow36D%E6%9D%AFwp/",
            "title": "CTFshow36D杯wp",
            "date_published": "2022-04-16T07:37:06.000Z",
            "content_html": "<h3 id=\"ctfshow-36d杯-wp\"><a class=\"anchor\" href=\"#ctfshow-36d杯-wp\">#</a> <strong>CTFshow 36D 杯 wp</strong></h3>\n<h4 id=\"1神光\"><a class=\"anchor\" href=\"#1神光\">#</a> 1. 神光</h4>\n<p>下载完直接运行</p>\n<p><img data-src=\"image-20220416234623113.png\" alt=\"image-20220416234623113\"></p>\n<p>随意输入字符串之后</p>\n<p><img data-src=\"image-20220416234744429.png\" alt=\"image-20220416234744429\"></p>\n<p>发现是一个循环，于是直接进入 IDA pro 查看</p>\n<p>由于有 key 的输出，所以直接查找字符串 key 从而进入 main 函数</p>\n<p>逻辑很简单</p>\n<p><img data-src=\"image-20220416235040830.png\" alt=\"image-20220416235040830\"></p>\n<p>查看</p>\n<p><img data-src=\"image-20220416235112332.png\" alt=\"image-20220416235112332\"></p>\n<p>sub_4113b1 函数，</p>\n<p><img data-src=\"image-20220416235146789.png\" alt=\"image-20220416235146789\"></p>\n<p>如果 str1 与 str2 相同，则 result 不为 0，反之为 0，根据 main 函数推测 result 不能为 0，可知 str2 应为 &quot;wangzherongyao&quot;</p>\n<p>重新执行程序，输入正确的 key 之后显示</p>\n<p><img data-src=\"image-20220416235347210.png\" alt=\"image-20220416235347210\"></p>\n<p>之后继续查看之后的函数</p>\n<p><img data-src=\"image-20220416235417757.png\" alt=\"image-20220416235417757\"></p>\n<p>进入之后分析</p>\n<p><img data-src=\"image-20220416235433077.png\" alt=\"image-20220416235433077\"></p>\n<p>简单的加密函数，本来以为写脚本就能解决，但是这里的 dword_41A4DC 数组的值未知，猜测应该是在程序运行期间初始化，所以进入 ollydbg 动态调试</p>\n<p><img data-src=\"image-20220417000435013.png\" alt=\"image-20220417000435013\"></p>\n<p>直接 ctrl+F8 , 到达输入时输入 “wangzherongyao&quot; 没想到 flag 直接弹出来了</p>\n<p><img data-src=\"image-20220417000537498.png\" alt=\"image-20220417000537498\"></p>\n<p>所以</p>\n<blockquote>\n<p><strong>flag{9969e2ddd64088f71af0caa891b4dc63}</strong></p>\n</blockquote>\n<h4 id=\"bbbigeqset\"><a class=\"anchor\" href=\"#bbbigeqset\">#</a> BBBigEqSet</h4>\n<p>拿到文件之后直接在 wsl 里面打开，然后</p>\n<p><img data-src=\"image-20220417204859822.png\" alt=\"image-20220417204859822\"></p>\n<p>用 exeinfo 看完是 64 位之后直接拉进 IDA 。</p>\n<p>查看 main 函数时提示函数占用太大，无法反编译，于是按照网上教程修改了 IDA 配置</p>\n<blockquote>\n<p>进入 IDA\\cfg\\ida.cfg</p>\n<p>修改  MAX_FUNCSIZE = 1024</p>\n</blockquote>\n<p>成功反编译后发现是很长的解方程的题目，因为之前没有做个类似的题目，但是知道 numpy 模块可以直接解方程，所以直接写 IDA pro 脚本</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># coding=utf-8</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>instr<span class=\"token operator\">=</span><span class=\"token number\">0x11c7</span>\t<span class=\"token comment\">#起始指令的地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>end_addr<span class=\"token operator\">=</span><span class=\"token number\">0x4963c</span>\t<span class=\"token comment\">#指令结束的地址</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>numpy_out<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>\t<span class=\"token comment\">#方便写脚本，让 ida 直接输出 numpy 的矩阵数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>flag<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\">#flag 数组用于存放方程未知数的系数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cmps<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\">#cmps 数组存放方程右侧的常数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>instr<span class=\"token operator\">&lt;=</span>end_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tdis_asm <span class=\"token operator\">=</span> idc<span class=\"token punctuation\">.</span>GetMnem<span class=\"token punctuation\">(</span>instr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dis_asm<span class=\"token operator\">==</span><span class=\"token string\">\"imul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>idc<span class=\"token punctuation\">.</span>GetOpType<span class=\"token punctuation\">(</span>instr<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#如果第二个 OPCODE 是立即数，主要为了区分 imul edx, eax, 9421h 和 imul eax, 60CDh 两种格式</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\tflag<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>idc<span class=\"token punctuation\">.</span>GetOperandValue<span class=\"token punctuation\">(</span>instr<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\tflag<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>idc<span class=\"token punctuation\">.</span>GetOperandValue<span class=\"token punctuation\">(</span>instr<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dis_asm<span class=\"token operator\">==</span><span class=\"token string\">\"cmp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tcmps<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>idc<span class=\"token punctuation\">.</span>GetOperandValue<span class=\"token punctuation\">(</span>instr<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tctr<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tnumpy_out<span class=\"token operator\">+=</span><span class=\"token string\">\"[\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> flag<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\tnumpy_out<span class=\"token operator\">+=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\tctr<span class=\"token operator\">=</span>ctr<span class=\"token operator\">+</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ctr<span class=\"token operator\">==</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#因为 flag 一共 128 位，这时我们的矩阵结束，添加 \"]\" 符号</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\tnumpy_out<span class=\"token operator\">+=</span><span class=\"token string\">\"],\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tnumpy_out<span class=\"token operator\">+=</span><span class=\"token string\">\",\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tflag<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tinstr<span class=\"token operator\">=</span>idc<span class=\"token punctuation\">.</span>NextHead<span class=\"token punctuation\">(</span>instr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#print numpy_out 这句用来输出方程的所有组系数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>numpy_out<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> cmps<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tnumpy_out<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">print</span> numpy_out\t<span class=\"token comment\">#输出方程右侧的常数</span></pre></td></tr></table></figure><p>上面的脚本只能将求解的矩阵当做字符串打印出来，但是因为我线性代数学得不好再加上对 numpy 用的不是很熟悉，所以只能将 &quot;矩阵&quot; 字符串打印出来然后手动的更改格式为矩阵</p>\n<p>解题的脚本如下</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># coding=utf-8</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> numpy</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>x <span class=\"token operator\">=</span> numpy<span class=\"token punctuation\">.</span>linalg<span class=\"token punctuation\">.</span>solve<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#这里的 c d 都是上一步得到的矩阵打印出来的 x 也是矩阵格式，所以之后还得继续更改格式</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"[102. 108.  97. 103. 123.  83. 111. 111. 111. 111.  48.  48.  48.  95. 76. 111. 111.  79.  79.  79.  79.  79.  79.  79.  79. 103. 103.  79. 57.  57. 103.  57.  57.  95. 115.  49. 109. 117.  76. 116.  97.  78.101.  79. 117. 115.  95.  69.  69.  69.  81. 117.  97. 116.  49.  48.110.  53.  95.  89.  48.  85.  85.  85.  85.  85.  85. 117. 117. 117.95.  99.  65.  65.  52.  52.  65.  65.  78.  78. 110. 110.  78.  95.83.  79.  79.  79.  79.  79.  79.  76.  86.  69.  95.  73.  84.  49.55.  84.  84.  49.  49.  55.  55.  49.  73.  84.  73.  84.  33.  33.33.  95.  56.  83. 104. 111. 116.  68. 115. 104.  80.  57.  48.  97.98. 125.]\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>d <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">102</span><span class=\"token punctuation\">,</span><span class=\"token number\">108</span><span class=\"token punctuation\">,</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span><span class=\"token number\">103</span><span class=\"token punctuation\">,</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span><span class=\"token number\">83</span><span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span><span class=\"token number\">95</span><span class=\"token punctuation\">,</span><span class=\"token number\">76</span><span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span><span class=\"token number\">79</span><span class=\"token punctuation\">,</span><span class=\"token number\">79</span><span class=\"token punctuation\">,</span><span class=\"token number\">79</span><span class=\"token punctuation\">,</span><span class=\"token number\">79</span><span class=\"token punctuation\">,</span><span class=\"token number\">79</span><span class=\"token punctuation\">,</span><span class=\"token number\">79</span><span class=\"token punctuation\">,</span><span class=\"token number\">79</span><span class=\"token punctuation\">,</span><span class=\"token number\">79</span><span class=\"token punctuation\">,</span><span class=\"token number\">103</span><span class=\"token punctuation\">,</span><span class=\"token number\">103</span><span class=\"token punctuation\">,</span><span class=\"token number\">79</span><span class=\"token punctuation\">,</span><span class=\"token number\">57</span><span class=\"token punctuation\">,</span><span class=\"token number\">57</span><span class=\"token punctuation\">,</span><span class=\"token number\">103</span><span class=\"token punctuation\">,</span><span class=\"token number\">57</span><span class=\"token punctuation\">,</span><span class=\"token number\">57</span><span class=\"token punctuation\">,</span><span class=\"token number\">95</span><span class=\"token punctuation\">,</span><span class=\"token number\">115</span><span class=\"token punctuation\">,</span><span class=\"token number\">49</span><span class=\"token punctuation\">,</span><span class=\"token number\">109</span><span class=\"token punctuation\">,</span><span class=\"token number\">117</span><span class=\"token punctuation\">,</span><span class=\"token number\">76</span><span class=\"token punctuation\">,</span><span class=\"token number\">116</span><span class=\"token punctuation\">,</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span><span class=\"token number\">78</span><span class=\"token punctuation\">,</span><span class=\"token number\">101</span><span class=\"token punctuation\">,</span><span class=\"token number\">79</span><span class=\"token punctuation\">,</span><span class=\"token number\">117</span><span class=\"token punctuation\">,</span><span class=\"token number\">115</span><span class=\"token punctuation\">,</span><span class=\"token number\">95</span><span class=\"token punctuation\">,</span><span class=\"token number\">69</span><span class=\"token punctuation\">,</span><span class=\"token number\">69</span><span class=\"token punctuation\">,</span><span class=\"token number\">69</span><span class=\"token punctuation\">,</span><span class=\"token number\">81</span><span class=\"token punctuation\">,</span><span class=\"token number\">117</span><span class=\"token punctuation\">,</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span><span class=\"token number\">116</span><span class=\"token punctuation\">,</span><span class=\"token number\">49</span><span class=\"token punctuation\">,</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span><span class=\"token number\">110</span><span class=\"token punctuation\">,</span><span class=\"token number\">53</span><span class=\"token punctuation\">,</span><span class=\"token number\">95</span><span class=\"token punctuation\">,</span><span class=\"token number\">89</span><span class=\"token punctuation\">,</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span><span class=\"token number\">85</span><span class=\"token punctuation\">,</span><span class=\"token number\">85</span><span class=\"token punctuation\">,</span><span class=\"token number\">85</span><span class=\"token punctuation\">,</span><span class=\"token number\">85</span><span class=\"token punctuation\">,</span><span class=\"token number\">85</span><span class=\"token punctuation\">,</span><span class=\"token number\">85</span><span class=\"token punctuation\">,</span><span class=\"token number\">117</span><span class=\"token punctuation\">,</span><span class=\"token number\">117</span><span class=\"token punctuation\">,</span><span class=\"token number\">117</span><span class=\"token punctuation\">,</span><span class=\"token number\">95</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span><span class=\"token number\">52</span><span class=\"token punctuation\">,</span><span class=\"token number\">52</span><span class=\"token punctuation\">,</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span><span class=\"token number\">78</span><span class=\"token punctuation\">,</span><span class=\"token number\">78</span><span class=\"token punctuation\">,</span><span class=\"token number\">110</span><span class=\"token punctuation\">,</span><span class=\"token number\">110</span><span class=\"token punctuation\">,</span><span class=\"token number\">78</span><span class=\"token punctuation\">,</span><span class=\"token number\">95</span><span class=\"token punctuation\">,</span><span class=\"token number\">83</span><span class=\"token punctuation\">,</span><span class=\"token number\">79</span><span class=\"token punctuation\">,</span><span class=\"token number\">79</span><span class=\"token punctuation\">,</span><span class=\"token number\">79</span><span class=\"token punctuation\">,</span><span class=\"token number\">79</span><span class=\"token punctuation\">,</span><span class=\"token number\">79</span><span class=\"token punctuation\">,</span><span class=\"token number\">79</span><span class=\"token punctuation\">,</span><span class=\"token number\">76</span><span class=\"token punctuation\">,</span><span class=\"token number\">86</span><span class=\"token punctuation\">,</span><span class=\"token number\">69</span><span class=\"token punctuation\">,</span><span class=\"token number\">95</span><span class=\"token punctuation\">,</span><span class=\"token number\">73</span><span class=\"token punctuation\">,</span><span class=\"token number\">84</span><span class=\"token punctuation\">,</span><span class=\"token number\">49</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token number\">84</span><span class=\"token punctuation\">,</span><span class=\"token number\">84</span><span class=\"token punctuation\">,</span><span class=\"token number\">49</span><span class=\"token punctuation\">,</span><span class=\"token number\">49</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token number\">49</span><span class=\"token punctuation\">,</span><span class=\"token number\">73</span><span class=\"token punctuation\">,</span><span class=\"token number\">84</span><span class=\"token punctuation\">,</span><span class=\"token number\">73</span><span class=\"token punctuation\">,</span><span class=\"token number\">84</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">95</span><span class=\"token punctuation\">,</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span><span class=\"token number\">83</span><span class=\"token punctuation\">,</span><span class=\"token number\">104</span><span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span><span class=\"token number\">116</span><span class=\"token punctuation\">,</span><span class=\"token number\">68</span><span class=\"token punctuation\">,</span><span class=\"token number\">115</span><span class=\"token punctuation\">,</span><span class=\"token number\">104</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">57</span><span class=\"token punctuation\">,</span><span class=\"token number\">48</span><span class=\"token punctuation\">,</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span><span class=\"token number\">125</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> d<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>flag&#123;Soooo000_LooOOOOOOOOggO99g99_s1muLtaNeOus_EEEQuat10n5_Y0UUUUUUuuu_cAA44AANNnnN_SOOOOOOLVE_IT17TT11771ITIT!!!_8ShotDshP90ab&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>'''</pre></td></tr></table></figure><p>总结一下，还是对 python 不太熟悉，基本的格式转换还有 numpy 模块的使用太生疏了</p>\n<p>还有一点就是后面得多学点 IDC 的内容，因为 IDA 里面写 python 脚本必须得用到这玩意儿</p>\n<blockquote>\n<p><strong>flag{Soooo000_LooOOOOOOOOggO99g99_s1muLtaNeOus_EEEQuat10n5_Y0UUUUUUuuu_cAA44AANNnnN_SOOOOOOLVE_IT17TT11771ITIT!!!_8ShotDshP90ab}</strong></p>\n</blockquote>\n<h4 id=\"tiny\"><a class=\"anchor\" href=\"#tiny\">#</a> tiny</h4>\n<p>下载之后 wsl 里面运行，显示段错误，而且文件本身也只有 90 几个字节，算是特别特别小的 elf 文件</p>\n<p>32 位，直接在 IDA 里面打开看汇编</p>\n<p>竟然可以反汇编，不由得感叹 IDA 的强大</p>\n<p>IDA 反汇编的 C 代码如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> __noreturn <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ecx</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp-4h] [ebp-4h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  v0 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    v1 <span class=\"token operator\">|=</span> <span class=\"token function\">__ROR4__</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v2 <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> v0<span class=\"token operator\">--</span> <span class=\"token operator\">-</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">0xCE60E4A</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> v0 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  __asm <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">int</span>     <span class=\"token number\">80</span>h<span class=\"token punctuation\">;</span> LINUX <span class=\"token operator\">-</span> sys_exit <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>ROR（循环右移）指令把所有位都向右移，最低位复制到进位标志位和最高位。该指令格式与 SHL 指令相同</p>\n</blockquote>\n<p>所以其他的就很清楚，程序接收参数 (flag), 先取出后四位循环右移 3 位，然后再相应的做异或运算，接着循环到取出前四位继续运算</p>\n<p><img data-src=\"image-20220419143423132.png\" alt=\"image-20220419143423132\"></p>\n<p><img data-src=\"image-20220419144343405.png\" alt=\"image-20220419144343405\"></p>\n<p>eax 是整个函数的返回值，由</p>\n<pre><code class=\"language-assembly\">test eax,eax\nsernz bl      ;这里就能判断eax为1\n</code></pre>\n<p>所以上面的</p>\n<pre><code class=\"language-assembly\">or eax,edx     ; 所以为了使eax=1，这里的edx只能为0\n</code></pre>\n<p>所以倒推异或，就能够理清程序思路</p>\n<pre><code>(edi&gt;&gt;3)^0x93F9A63==0x5D99429  #第一次循环，edi为flag的后四位\n(edi&gt;&gt;3)^0x8AF45207==0X5D99429\n</code></pre>\n<p>之后就很简单的逆向计算就可以</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">ROR</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    n <span class=\"token operator\">=</span> n<span class=\"token operator\">&amp;</span><span class=\"token number\">0xffffffff</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">>></span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token operator\">-</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0xffffffff</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">hex_2_str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    s <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        s<span class=\"token operator\">+=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">%</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        x<span class=\"token operator\">/=</span><span class=\"token number\">0x100</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> s</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>hex_2_str<span class=\"token punctuation\">(</span>ROR<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0x8AF45207</span> <span class=\"token operator\">^</span> <span class=\"token number\">0x5D99429</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>hex_2_str<span class=\"token punctuation\">(</span>ROR<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x93F9A63</span><span class=\"token operator\">^</span><span class=\"token number\">0x5D99429</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#ror (flag,x) 的逆算法是 ror (flag,32-x)</span></pre></td></tr></table></figure><p>得到 flag</p>\n<blockquote>\n<p><strong>flag{t1nyPr0g}</strong></p>\n</blockquote>\n<h4 id=\"签到题\"><a class=\"anchor\" href=\"#签到题\">#</a> 签到题</h4>\n<p>下载后打开，<img data-src=\"image-20220419154714661.png\" alt=\"image-20220419154714661\"></p>\n<p><img data-src=\"image-20220419155002514.png\" alt=\"image-20220419155002514\"></p>\n<p>为了让 V6=0</p>\n<p>则 v8=v7<sup>(v7+(v7</sup>v9[v7]))</p>\n<p>然后直接写脚本</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">list</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">102</span><span class=\"token punctuation\">,</span><span class=\"token number\">109</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span><span class=\"token number\">127</span><span class=\"token punctuation\">,</span><span class=\"token number\">58</span><span class=\"token punctuation\">,</span><span class=\"token number\">85</span><span class=\"token punctuation\">,</span><span class=\"token number\">106</span><span class=\"token punctuation\">,</span><span class=\"token number\">57</span><span class=\"token punctuation\">,</span><span class=\"token number\">82</span><span class=\"token punctuation\">,</span><span class=\"token number\">122</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token number\">81</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">51</span><span class=\"token punctuation\">,</span><span class=\"token number\">35</span><span class=\"token punctuation\">,</span><span class=\"token number\">67</span><span class=\"token punctuation\">,</span><span class=\"token number\">70</span><span class=\"token punctuation\">,</span><span class=\"token number\">41</span><span class=\"token punctuation\">,</span><span class=\"token number\">61</span><span class=\"token punctuation\">,</span><span class=\"token number\">41</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">127</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">38</span><span class=\"token punctuation\">,</span><span class=\"token number\">77</span><span class=\"token punctuation\">,</span><span class=\"token number\">49</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">94</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>l<span class=\"token operator\">=</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    v8<span class=\"token operator\">=</span>i<span class=\"token operator\">^</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">^</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>v8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p><strong>flag{A_s1mpLe&amp;E4sy_RE_i5Nt_1t}</strong></p>\n</blockquote>\n",
            "tags": [
                "Reverse_wp_ctfshow_36D杯"
            ]
        },
        {
            "id": "https://0x401000nu1l.github.io/2022/04/13/plan/",
            "url": "https://0x401000nu1l.github.io/2022/04/13/plan/",
            "title": "plan",
            "date_published": "2022-04-13T14:29:38.000Z",
            "content_html": "<h1 id=\"对自己小半年总结以及规划\"><a class=\"anchor\" href=\"#对自己小半年总结以及规划\">#</a> 对自己小半年总结以及规划</h1>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>2022 年过去的四个月，学习了很多方面的知识，也对计算机知识稍微深入了解了一点，但是但当涉猎，没有精通的。</p>\n<h4 id=\"兴趣\"><a class=\"anchor\" href=\"#兴趣\">#</a> 兴趣</h4>\n<p>刚开始是想要打 CTF，自己也很喜欢 reverse 方向，也自己尝试着破解了对自己有用的软件，也是因为 reverse，我慢慢有了对底层系统知识的兴趣，假期自己跟着 b 站谭玉刚先生做了 uefi，计算机系统确实精密而有趣，最近学的 csapp 更让我有了以后从事系统研究的打算。</p>\n<h4 id=\"技能\"><a class=\"anchor\" href=\"#技能\">#</a> 技能</h4>\n<p>但是整个 2022 伊始都出于深深的焦虑中，学分绩不高，保不了研，总是在读研以及工作之间焦虑，过度内耗，导致对于计算机更多知识没有静下心来学习，整个寒假也是在浑浑噩噩中度过。</p>\n<p>之后有一段时间和声哥聊天，感觉就业似乎也是很不错的选择，于是又开始重新拾起大一自学的 java，从面向对象开始自学，学完了 mysql，学完了 JDBC，最后还是止步，看到今年互联网大厂 “寒冬” 来临，害怕没有研究生学历寸步难行，就又准备着竞赛的内容，java 也就没有深入学习。</p>\n<h4 id=\"竞赛\"><a class=\"anchor\" href=\"#竞赛\">#</a> 竞赛</h4>\n<p>竞赛涉及的是 nlp 和 cv 方向，或许是之前对底层系统更感兴趣的原因，自己一直对 ai 方向兴趣不大，自然也没有更多东西深究深度学习的内容，也只停留在简单利用开源的深度学习模型。</p>\n<h2 id=\"规划\"><a class=\"anchor\" href=\"#规划\">#</a> 规划</h2>\n<h4 id=\"兴趣-2\"><a class=\"anchor\" href=\"#兴趣-2\">#</a> 兴趣</h4>\n<p>继续重新拾起来自己喜欢的底层系统，尽量保持一定的 ctf 题目的训练量，目标应该是 ctfshow 逆向题赶在暑假之前做完吧，努力多做点题目，看看能不能在暑假进入 CTF 校队，更远的展望是之后能够代表哈工大去参加信息安全竞赛吧。加油</p>\n<p>兴趣永远是最好的老师，室友永远是最好的搜索引擎，多和室友学习，了解一下前沿圈子的资讯，避免闭门造车。</p>\n<h4 id=\"技能-2\"><a class=\"anchor\" href=\"#技能-2\">#</a> 技能</h4>\n<p>leetcode 每天刷一道题，保持一下 java 编程手感。</p>\n<p>java web 方向抽空闲时间看看吧，实践项目可以等到暑假再自己找时间做个大项目练练</p>\n<h4 id=\"竞赛-2\"><a class=\"anchor\" href=\"#竞赛-2\">#</a> 竞赛</h4>\n<p>虽然是自己不感兴趣的领域，但还是努力去做吧。</p>\n<p>nlp 和 cv 的问题多问问学长，多和队友交流，加油</p>\n<p>感谢一直陪伴我，支持我，包容我，理解我的女朋友。</p>\n<p>未来总是不确定的，现在多努力是为了在未来的不确定中获得更多的选择权。</p>\n<p>加油</p>\n",
            "tags": [
                "plan"
            ]
        },
        {
            "id": "https://0x401000nu1l.github.io/2022/04/12/%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%82%B8%E5%BC%B9/",
            "url": "https://0x401000nu1l.github.io/2022/04/12/%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%82%B8%E5%BC%B9/",
            "title": "二进制炸弹",
            "date_published": "2022-04-12T01:40:12.000Z",
            "content_html": "<h1 id=\"哈尔滨工业大学计算机系统lab2\"><a class=\"anchor\" href=\"#哈尔滨工业大学计算机系统lab2\">#</a> <strong>哈尔滨工业大学计算机系统 LAB2</strong></h1>\n<h3 id=\"一实验基本信息\"><a class=\"anchor\" href=\"#一实验基本信息\">#</a> 一，实验基本信息</h3>\n<h4 id=\"1实验目的\"><a class=\"anchor\" href=\"#1实验目的\">#</a> 1. 实验目的</h4>\n<p>​\t拆炸弹，了解汇编 and <strong>fun</strong></p>\n<h4 id=\"2实验环境与工具\"><a class=\"anchor\" href=\"#2实验环境与工具\">#</a> 2. 实验环境与工具</h4>\n<h5 id=\"21硬件环境\"><a class=\"anchor\" href=\"#21硬件环境\">#</a> 2.1 硬件环境</h5>\n<p>​\tIntel i7-i0875H 64 位处理器   RTX2070</p>\n<h5 id=\"22软件环境\"><a class=\"anchor\" href=\"#22软件环境\">#</a> 2.2 软件环境</h5>\n<p>​\tWindows<strong>11</strong> &amp; Ubuntu 20.04 64 位</p>\n<h5 id=\"23-开发工具\"><a class=\"anchor\" href=\"#23-开发工具\">#</a> 2.3 开发工具</h5>\n<p>​\tvscode   IDA pro  gdb(peda)</p>\n<h3 id=\"二各阶段炸弹的破解与分析\"><a class=\"anchor\" href=\"#二各阶段炸弹的破解与分析\">#</a> 二，各阶段炸弹的破解与分析</h3>\n<p>​</p>\n<h4 id=\"1初步分析\"><a class=\"anchor\" href=\"#1初步分析\">#</a> 1. 初步分析</h4>\n<p>在 gdb 环境下安装 peda 或者 pwndbg 都会大大提高工作效率，工作界面友好很多</p>\n<p>[peda &amp; pwndbg 安装](<span class=\"exturl\" data-url=\"aHR0cDovL3BlY2tlcndvb2QudG9wL3Bvc3QvcGVkYV92c19wd25kYmdfZ2RiLw==\">Peda vs Pwndbg - GDB - p3ck3rw00d's blog (peckerwood.top)</span>)</p>\n<p><code>$ gdb bomb</code></p>\n<p>首先查看函数列表</p>\n<p><code> $  info functions</code></p>\n<p><img data-src=\"image-20220409131530471.png\" alt></p>\n<p>看到常规函数可以猜想可执行文件结构，phase_* 等代表不同的关卡，explode_bomb 为炸弹引爆函数 phase_defuse 函数应该是成功拆除炸弹的提示函数，其他函数根据函数名即可知道相应的功能。</p>\n<p>大体知道文件结构之后即可设置断点，开始动态调试</p>\n<p><code>$ b  main</code></p>\n<h4 id=\"2第一关的破解与分析\"><a class=\"anchor\" href=\"#2第一关的破解与分析\">#</a> 2. 第一关的破解与分析</h4>\n<p>进入 main 函数之后一步步 n</p>\n<p><img data-src=\"image-20220409132702810.png\" alt=\"image-20220409132702810\"></p>\n<p>可以看出初始化炸弹的函数被调用，之后一直单步步过到 read_line 函数</p>\n<p>提示输入</p>\n<p><img data-src=\"image-20220409132945900.png\" alt=\"image-20220409132945900\"></p>\n<p>先输入 111111，继续前进</p>\n<p><img data-src=\"image-20220409133040436.png\" alt=\"image-20220409133040436\"></p>\n<p>很明显，我们输入的 &quot;111111&quot; 被送到 rdi 寄存器然后调用函数 phase_1</p>\n<p>使用指令 s  进入 phase_1 函数</p>\n<p><code>$  disas   #查看phase_1函数的汇编</code></p>\n<p><img data-src=\"image-20220409133645790.png\" alt=\"image-20220409133645790\"></p>\n<p>函数接受的输入存在了 rdi 寄存器中，这里又从内存中取出一段数据存入 rsi</p>\n<p>接着调用函数 string_not_equal</p>\n<blockquote>\n<p>参数传入函数时，使用寄存器的顺序 寄存器 **% rdi, % rsi, % rdx, % rcx, % r8, % r9** 分别用来保存函数的 6 个参数，而 % rax 用来保存函数的返回值。</p>\n</blockquote>\n<p>所以第一关就是考简单的函数调用，单步步过之后查看 rsi 寄存器的值就能的到第一关的 ans</p>\n<p><img data-src=\"image-20220409134213172.png\" alt=\"image-20220409134213172\"></p>\n<p>这里就体现出了 peda 的好处，可以直接查看寄存器的值以及 rip 所指地址附近的汇编代码，可以看到我们输入的值</p>\n<p>&quot;111111&quot;</p>\n<p>以及正确答案</p>\n<p>&quot;I am not part of the problem. I am a Republican.&quot;</p>\n<h4 id=\"3第二关的破解与分析\"><a class=\"anchor\" href=\"#3第二关的破解与分析\">#</a> 3. 第二关的破解与分析</h4>\n<p>执行如下命令直接运行到 phase_2 处</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>k <span class=\"token comment\">#中断当前调试进程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b phase_2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>r <span class=\"token comment\">#重新开始动态调试</span></pre></td></tr></table></figure><p>之后会提示输入第一关密码，输入后程序停止，之后开始单步调试</p>\n<p><img data-src=\"image-20220409135044864.png\" alt=\"image-20220409135044864\"></p>\n<p>我们继续输入 123456 尝试</p>\n<p><code> $ disas # 查看phase_2的汇编代码</code></p>\n<p><img data-src=\"image-20220409135456198.png\" alt=\"image-20220409135456198\"></p>\n<p>观察下图</p>\n<p><img data-src=\"image-20220409140145503.png\" alt=\"image-20220409140145503\"></p>\n<p>可以看到 Phase_2 调用了 read_six_numbers 函数读入了 6 个数字，并且，由函数开头声明栈的操作，可以看出是通过栈来传递参数给 read_six_numbers 函数</p>\n<p><img data-src=\"image-20220409141653178.png\" alt=\"image-20220409141653178\"></p>\n<p>这里的意图很明显了，既然是通过栈传递参数，这里是检验输入的前两个值</p>\n<p>可以知道一共需要读入六个数，其中<strong>前两个数分别为 0  1</strong> 验证前两个数成功后跳转到</p>\n<p><img data-src=\"image-20220409142830866.png\" alt=\"image-20220409142830866\"></p>\n<p>后面的这部分其实是一个<strong>循环</strong>（<em>因为之前学习汇编的时候王爽老师书里面讲的控制循环的寄存器是 cx (rcx,ecx)，所以第一时间看到代码的时候也是没反应过来是循环，但是看到 ebx 寄存器被赋初值，然后每次加一接着不断地跳回到之前的代码执行，最后还不断地将 ebx 的值与固定值 0x5 比较，才发觉应该是循环</em>）</p>\n<p><img data-src=\"image-20220409143416779.png\" alt=\"image-20220409143416779\"></p>\n<p>这段代码也很好理解， &amp;ecx=&amp;ebx-1   &amp;eax=&amp;ebx-1 接着比较 A [&amp;edx] 与 A [&amp;ecx]+A [&amp;eax] 的大小，这不就是斐波那契么 ((*･ω&lt; ) )</p>\n<p>所以将这一关翻译成 C 语言就是</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> numbers<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> numbers<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token function\">explode_bomb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解题脚本如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>nums<span class=\"token operator\">=</span><span class=\"token number\">0x100000000LL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//  0 1 1 2 3 5</span></pre></td></tr></table></figure><h4 id=\"4第三关的破解与分析\"><a class=\"anchor\" href=\"#4第三关的破解与分析\">#</a> 4. 第三关的破解与分析</h4>\n<p><img data-src=\"image-20220409145016026.png\" alt=\"image-20220409145016026\"></p>\n<p>清除断点之后在 phase_3 下断点，接着 r 运行，输入前两关得到的密码之后程序就会停在第三关</p>\n<p>提示输入</p>\n<p><img data-src=\"image-20220409145224075.png\" alt=\"image-20220409145224075\"> 我们继续输入 &quot;123456&quot; 尝试</p>\n<p>接着单步步过</p>\n<p><img data-src=\"image-20220409152349593.png\" alt=\"image-20220409152349593\"></p>\n<p>发现从内存中向 esi 寄存器中传入了数据，si 运行到赋值完成，查看 esi 内保存的值</p>\n<p><img data-src=\"image-20220409152520489.png\" alt=\"image-20220409152520489\"></p>\n<p>可以看到是格式化输入的字符串，由此可知后面的 scanf 函数接受的是两个整型变量</p>\n<p>之后进入第一层判断，判断 scanf 的返回值</p>\n<blockquote>\n<p>我们可以通过运用函数 scanf () 的返回值的意义（即 “所输入的数据与格式字符串中匹配次数”），来把控我们的输入格式的正确性.</p>\n</blockquote>\n<p><img data-src=\"image-20220409155313942.png\" alt=\"image-20220409155313942\"></p>\n<p>这里要求返回值 &gt; 1，之后<img data-src=\"image-20220409155615483.png\" alt=\"image-20220409155615483\"> 要求输入的第一个参数小于 7</p>\n<p>完成这些前置判定之后</p>\n<p><img data-src=\"image-20220409155738679.png\" alt=\"image-20220409155738679\"></p>\n<p>该代码段中包含一段内存地址</p>\n<p>使用 gdb 查看内存地址的命令查看所指内存地址</p>\n<p><img data-src=\"image-20220409155907546.png\" alt=\"image-20220409155907546\"></p>\n<p>由于小端序存储的原因，上面地址简化一下就是 0x4014dc~0x401506 地址值</p>\n<p>所以可以判断这是一个跳转表</p>\n<p><img data-src=\"image-20220409160048474.png\" alt=\"image-20220409160048474\"></p>\n<p>并且通过 rax 控制跳转</p>\n<blockquote>\n<p>switch 语句可以根据一个整数索引值进行多重分支。</p>\n<p>GCC 根据 case 的数量和 case 值的稀疏程度来翻译 switch 语句，当 case 情况比较多 (例如 4 个以上)，并且值的范围跨度比较小时，就会使用跳转表。</p>\n<p>跳转表是一个数组，表项 i 是一个代码段的地址，这个代码段实现当开关索引值等于 i 时程序应该采取的动作。</p>\n</blockquote>\n<p>由此可以判断这关考查的是 switch 语句的汇编语言的实现</p>\n<p><img data-src=\"image-20220409160237069.png\" alt=\"image-20220409160237069\"></p>\n<p>继续回看这段代码就可以由此列出反汇编之后的 C 语言代码</p>\n<pre><code class=\"language-C\">void __fastcall phase_3(char *input)\n&#123;\n  int v1; // eax\n  int v2; // eax\n  int v3; // eax\n  int v4; // eax\n  int v5; // eax\n  int v6; // eax\n  int v7; // eax\n  int v8; // eax\n  int sum; // [rsp+8h] [rbp-10h] BYREF\n  int index; // [rsp+Ch] [rbp-Ch] BYREF\n\n  if ( (int)__isoc99_sscanf(input, &quot;%d %d&quot;, &amp;index, &amp;sum) &lt;= 1 )\n    explode_bomb();\n  switch ( index )\n  &#123;\n    case 0:\n      v1 = 799;\n      goto LABEL_5;\n    case 1:\n      v1 = 0;\nLABEL_5:\n      v2 = v1 - 301;\n      goto LABEL_6;\n    case 2:\n      v2 = 0;\nLABEL_6:\n      v3 = v2 + 740;\n      goto LABEL_7;\n    case 3:\n      v3 = 0;\nLABEL_7:\n      v4 = v3 - 772;\n      goto LABEL_8;\n    case 4:\n      v4 = 0;\nLABEL_8:\n      v5 = v4 + 772;\n      goto LABEL_9;\n    case 5:\n      v5 = 0;\nLABEL_9:\n      v6 = v5 - 772;\n      goto LABEL_10;\n    case 6:\n      v6 = 0;\nLABEL_10:\n      v7 = v6 + 772;\n      break;\n    case 7:\n      v7 = 0;\n      break;\n    default:\n      explode_bomb();\n  &#125;\n  v8 = v7 - 772;\n  if ( index &gt; 5 || sum != v8 )\n    explode_bomb();\n&#125;\n// from IDA pro \n</code></pre>\n<p>很容易就可以得到答案 2 -32 (答案不唯一)</p>\n<h4 id=\"5第四关的破解与分析\"><a class=\"anchor\" href=\"#5第四关的破解与分析\">#</a> 5. 第四关的破解与分析</h4>\n<p>和前面方法一样，下断点，然后运行到 phase_4 处，并且继续输入 &quot;123456&quot;</p>\n<p>直接使用 disas 命令查看汇编代码</p>\n<p><img data-src=\"image-20220409160906296.png\" alt=\"image-20220409160906296\"></p>\n<p>和第三关一样，先根据 scanf 的返回值判断输入格式以及输入个数的正确性</p>\n<p><img data-src=\"image-20220409162507706.png\" alt=\"image-20220409162507706\"></p>\n<p>接着这段代码要求 eax 不能等于 0 并且 eax 小于等于 14 即    <strong>eax&gt;0&amp;&amp;eax&lt;=14</strong></p>\n<p><img data-src=\"image-20220409162720472.png\" alt=\"image-20220409162720472\"></p>\n<p>后面这一段也很好理解，就是将 scanf 输入的第一个参数传给 edi 寄存器并且将 esi 寄存器值赋为 0，调用<strong> fun4</strong> 之后的结果再与 0x5 比较，由此可知<strong> fun 返回值应该为 5</strong></p>\n<p>由于上面知道了需要输入的是两个整形数，所以重新开始调试，并且输入 &quot;1  2&quot;</p>\n<p>成功通过第一道判断</p>\n<p><img data-src=\"image-20220409164845944.png\" alt=\"image-20220409164845944\"></p>\n<p>接着一直 si 并进入 fun4，查看 fun4 的汇编代码</p>\n<p><img data-src=\"image-20220409165225541.png\" alt=\"image-20220409165225541\"></p>\n<p>一步步向下分析直到代码</p>\n<p><code>shr eax,0x1f</code></p>\n<p>关于这段代码，特别感谢我的两位同学指出我的错误 @ywy_c_asm &amp; @cnwangjihe</p>\n<blockquote>\n<p><strong>那一段是用来处理负数整除问题的</strong><br>\n<strong>他下方的 sar 是带符号位的右移</strong><br>\n<strong> - 15 右移一位结果是 - 8，但 c 里面整除二结果应该是 - 7，所以需要额外加一</strong><br>\n<strong>正数右移一位和整除二则是等价的 \\      <em>from @cnwangjihe</em></strong></p>\n<p><strong>带符号右移永远等价于除二向下取整，<em>然后再用符号位调整一下</em>  from @ywy_c_asm</strong></p>\n</blockquote>\n<p><img data-src=\"image-20220409170638377.png\" alt=\"image-20220409170638377\"></p>\n<p>这段代码结合调用 fun4 函数之前的代码一起分析就能知道 eax 等于 fun4 接收的参数 esi 与 ecx 的平均数  即    <strong>&amp;eax = &amp;esi+(&amp;ecx-&amp;esi)/2</strong></p>\n<p>最后将 eax 再与 edi 相比较，根据比较结果再次跳转，并且再次调用 fun4</p>\n<p>由此可知，这一关考查的是<strong>递归函数</strong>的汇编语言实现</p>\n<p>并且由汇编可以轻松分析 C 语言函数</p>\n<pre><code class=\"language-C\">int __fastcall func4(int val, int low, int high)\n&#123;\n  int v3; // eax\n\n  v3 = low + (high - low) / 2;\n  if ( v3 &gt; val )\n    return 2 * func4(val, low, v3 - 1);\n  if ( v3 &lt; val )\n    return 2 * func4(val, v3 + 1, high) + 1;\n  return 0;\n&#125;\n//from IDA pro\n</code></pre>\n<p>解决 fun4 的问题就可以得出当时 scanf 接收的第一个输入值的正确值，还有第二个输入值的值未确定，继续看跳出递归之后的代码段</p>\n<p><img data-src=\"image-20220409171624641.png\" alt=\"image-20220409171624641\"></p>\n<p>至此，两个参数的值都能确定</p>\n<p>解题脚本如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fun4</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> uv<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> uv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> uv<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>uv<span class=\"token operator\">&lt;=</span><span class=\"token number\">14</span><span class=\"token punctuation\">;</span>uv<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        sum<span class=\"token operator\">=</span><span class=\"token function\">fun4</span><span class=\"token punctuation\">(</span>uv<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>uv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fun4</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> uv<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> v3<span class=\"token operator\">=</span>low<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>high<span class=\"token operator\">-</span>low<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>v3<span class=\"token operator\">></span>uv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token function\">fun4</span><span class=\"token punctuation\">(</span>uv<span class=\"token punctuation\">,</span>low<span class=\"token punctuation\">,</span>v3<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>v3<span class=\"token operator\">&lt;</span>uv<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token function\">fun4</span><span class=\"token punctuation\">(</span>uv<span class=\"token punctuation\">,</span>v3<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>high<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// output 10</span></pre></td></tr></table></figure><h4 id=\"6第五关的破解与分析\"><a class=\"anchor\" href=\"#6第五关的破解与分析\">#</a> 6. 第五关的破解与分析</h4>\n<p>同前几关的方式，在 phase_5 处打断点，然后运行到 phase_5, 接着继续输入 &quot;123456&quot; 测试，单步步过到达 phase_5, 继续  disas 查看汇编代码</p>\n<p><img data-src=\"image-20220409190043150.png\" alt=\"image-20220409190043150\"></p>\n<p>前面的代码都很熟悉，0x40334f 处的数据正是第四关里的 &quot;% d % d&quot;, 根据提示重新输入测试值 &quot;1 2&quot;</p>\n<p><img data-src=\"image-20220409191812554.png\" alt=\"image-20220409191812554\"></p>\n<p>该段代码对参数做了一些运算 ，函数通过栈来传递参数，并且传参顺序与 C 语言中参数顺序刚好相反，所以这里 [rsp+0xc] 即为第一个参数，记为 val1，也就是我们输入的 1 ，[rsp+0x8] 即为第二个参数记为 val2，也就是我们输入的 2。</p>\n<p>接着，程序又定义了两个变量 (寄存器)，ecx=0,edx=0, 分别记作 v3,v4</p>\n<p>所以这段汇编代码翻译为 C 代码即为</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>val1 <span class=\"token operator\">&amp;=</span> <span class=\"token number\">0xf</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>v3 <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//ecx</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>v4 <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//edx</span></pre></td></tr></table></figure><p><img data-src=\"image-20220409192718574.png\" alt=\"image-20220409192718574\"></p>\n<p>这段代码其实已经很好理解了，考点就是数组的汇编语言实现</p>\n<p>查看 0x403200 处的数据</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x/100xb 0x403200</pre></td></tr></table></figure><p><img data-src=\"image-20220409193548299.png\" alt=\"image-20220409193548299\"></p>\n<p>能够看出来是数组，既然是数组，就可以用另一种方法提取数组 (之前搞逆向的时候，用 IDA PRO 可以直接快捷键 shift+e 就能提取数组，但是 gdb 只能以一种很原始的方式)</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p *array@length <span class=\"token comment\">#array 可以是数组名也可以是内存地址，length 指的是想要查看的位数</span></pre></td></tr></table></figure><p><img data-src=\"image-20220409194307752.png\" alt=\"image-20220409194307752\"></p>\n<p>后面的乱码及说明不是数组内容，取前面的即可。</p>\n<p>翻译成 C 代码即是</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>val1<span class=\"token operator\">!=</span><span class=\"token number\">0xf</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    v4<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    val1<span class=\"token operator\">=</span>array<span class=\"token punctuation\">[</span>val1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    v3<span class=\"token operator\">+=</span>val1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//array[]=&#123;0xa, 0x2, 0xe, 0x7, 0x8, 0xc, 0xf, 0xb, 0x0, 0x4, 0x1, 0xd, 0x3, 0x9, 0x6, 0x5&#125;</span></pre></td></tr></table></figure><p>循环结束之后到达</p>\n<p><img data-src=\"image-20220409194636150.png\" alt=\"image-20220409194636150\"></p>\n<p>这里比较了 val2 与 v3 的大小关系，并且要求 val2 与 v3 大小相等</p>\n<p>据此可以写出解题脚本</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">15</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        p<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        p <span class=\"token operator\">&amp;=</span><span class=\"token number\">15u</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> v2<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> v1<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">!=</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token operator\">++</span>v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            p<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            v1<span class=\"token operator\">+=</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>v2<span class=\"token operator\">==</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"searched i=%d v1=%d\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 直接爆破 (～￣▽￣)～</span></pre></td></tr></table></figure><p>得出答案</p>\n<h4 id=\"7第六关的破解与分析\"><a class=\"anchor\" href=\"#7第六关的破解与分析\">#</a> 7. 第六关的破解与分析</h4>\n<p>个人感觉 objdump 的界面不是很友好，比较乱，更不如 gdb-peda 用起来方便，所以继续使用 gdb (其实使用 IDApro 会简单很多，但是为了检验一下自己的汇编基本功，就还是嗯看汇编代码吧)</p>\n<p>老方法，在 Phase_6 处<strong>下断点</strong>，然后<strong> run</strong> 到 Phase 后使用<strong> disas</strong> 命令查看汇编</p>\n<p><strong>个人经验</strong> ：寄存器在每个独立的代码段中充当的更多的是局部变量，汇编语言通过对寄存器的完美使用来实现不同的功能</p>\n<p>既然寄存器大多扮演局部变量，所以为了方便分析，给每个寄存器都设一个特定的变量名，如下</p>\n<p><em><strong>r12 == j     rbp == i  rbx== n   rax == p  rcx == m  rdx == v1 rdi ==v2</strong></em></p>\n<p>这里暂时不知道各个变量的类型，等到后面分析就会一一确定</p>\n<p><img data-src=\"image-20220411133452259.png\" alt=\"image-20220411133452259\"></p>\n<p>这段代码的作用是定义变量同时建立堆栈，然后给 rsi 赋值之后作为参数送入函数 read_six_numbers, 查看 read_six_numbers 函数的汇编代码</p>\n<p><img data-src=\"image-20220411134848160.png\" alt=\"image-20220411134848160\"></p>\n<blockquote>\n<p><em><strong>LEA 与 MOV 的区别</strong></em></p>\n<p>lea 是 “load effective address” 的缩写，简单的说，<strong>lea 指令可以用来将一个内存地址直接赋给目的操作数</strong>，例如：</p>\n<p><strong>lea eax,[ebx+8] 就是将 ebx+8 这个值直接赋给 eax，而不是把 ebx+8 处的内存地址里的数据赋给 eax</strong>。</p>\n<p>而 mov 指令则恰恰相反，例如：</p>\n<p>mov eax,[ebx+8]</p>\n<p>则是把内存地址为 ebx+8 处的数据赋给 eax。</p>\n</blockquote>\n<p>所以调用 read_six_numbers 函数之前</p>\n<p><img data-src=\"image-20220411135218612.png\" alt=\"image-20220411135218612\"></p>\n<p>这里的 lea rsi,[rsp+0x30] 的目的就是将 rsp+0x30 这段地址直接赋值给 rsi，而不是将 rsp+0x30 处的值传给 rsi。</p>\n<p>接着进入 read_six_numbers 后</p>\n<p><img data-src=\"image-20220411135612002.png\" alt=\"image-20220411135612002\"></p>\n<p>这里我原本以为的是获取六个输入变量的地址，然后将地址传入 scanf 函数直接读入，但是分析这一段是发现了问题，这里<strong>首先是通过 rax 寄存器向栈中压入了两个值，然后在调用 scanf 读值</strong>，根据前面几关中的经验，scanf 函数的参数首先是读入值的格式化字符串也就是前几关常见的类似 &quot;% d % d&quot; 这种，在 read_six_numbers 函数中 0x403343 地址处的值扮演了这个角色，查看该处的数据值</p>\n<p><img data-src=\"image-20220411141238206.png\" alt=\"image-20220411141238206\"></p>\n<p>果然是读入了六个整数，所以 scanf 函数一共接受了 7 个参数</p>\n<blockquote>\n<p>当参数个数小于等于 6 个时，使用寄存器<strong> rdi,rsi,rdx,rcx,r8,r9，从第 7 个参数开始通过栈传递，顺序为从右往左入栈</strong></p>\n</blockquote>\n<p>这样就可以解释的通为什么 read_six_numbers 会选择先将值先入栈，再调用 scanf</p>\n<p>读完之后继续分析 phase_6</p>\n<p><img data-src=\"image-20220411144854347.png\" alt=\"image-20220411144854347\"></p>\n<p>汇编语言写的循环结构都有很强的套路性，通常都用一个固定的寄存器表示一个循环变量，然后也包含循环结束标志，还有每次循环循环变量如何发生改变 (也就是 for 循环括号里的内容) 据此，我们可以很容易的确定循环部分</p>\n<p>如上图，我们可以发现外围循环是以 ebp 为循环变量的循环，内嵌了以 ebx 为循环变量的循环</p>\n<p><img data-src=\"image-20220411151332183.png\" alt=\"image-20220411151332183\"></p>\n<p>分析循环结构的时候如果遇到跳出循环的语句，可以做标记然后不跳出，继续执行后面的代码，并且很有可能后面的代码就是循环执行的部分，就像上图中的一样</p>\n<p>分析后很简单就能写出 C 代码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">//rbp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rbx</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//rax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[rsp+0x30] ~</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">bomb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>n<span class=\"token operator\">&lt;=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>n<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>arrat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token function\">bomb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/* tips: dword ptr [] 是整型数值</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tqword ptr [] 是一个指针</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>*/</pre></td></tr></table></figure><p>再往下看</p>\n<p><img data-src=\"image-20220411154357498.png\" alt=\"image-20220411154357498\"></p>\n<p>这段也是很明显的循环结构，直接翻译成 C 代码如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//rax</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">&lt;=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    array<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">7</span><span class=\"token operator\">-</span>array<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>后面也是一样的分析方法</p>\n<p><img data-src=\"image-20220411160543274.png\" alt=\"image-20220411160543274\"></p>\n<p>这里要注意的是之前的 array [] 数组地址是 [rsp+0x30]</p>\n<p>但是这里出现了一个新的地址，[rsp]，这是 phase_6 自己的数组，起名为 newarr [6]</p>\n<p>还有一个点需要注意</p>\n<p><img data-src=\"image-20220411160819721.png\" alt><img data-src=\"image-20220411160835458.png\" alt=\"image-20220411160835458\"></p>\n<p>这两者<strong>相同点是 DWORD PTR, 说明两者都是指针变量</strong>，不同点是前者 [rsp+rdx * 8] [ ] 里面有 rdx 寄存器，也就是说<strong> rdx (寄存器) 做索引</strong>，所以这里的 [rsp+rdx*8] 其实就是数组的地址，而 rdx 也就是数组的索引</p>\n<p>后者没有索引，而且其实寄存器是 rcx 而不是栈顶指针 rsp</p>\n<p>通常用这种形式表示链表    <strong>链表的 next 指针刚好占 8 个字节</strong> (实验环境为 64 位).</p>\n<blockquote>\n<p>一个指针在 32 位的计算机上，占 4 个字节；<br>\n一个指针在 64 位的计算机上，占 8 个字节。</p>\n</blockquote>\n<p>所以这里的 [rcx+0x8] 就相当于 rcx=rcx-&gt;next</p>\n<p>说到这里，后文中出现的</p>\n<p><img data-src=\"image-20220411161738385.png\" alt=\"image-20220411161738385\"><img data-src=\"image-20220411161752473.png\" alt=\"image-20220411161752473\"></p>\n<p>这两者都是<strong> DWORD PTR , 说明两者都是整型数据</strong>，所以这里的 **[rbx] 就是 node-&gt;value**</p>\n<p>而 **[rbx+0x8] 就是 node-&gt;next-&gt;value**</p>\n<p>这样的话就可以根据汇编写出来 C 代码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">//rsi</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//rax</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>listnode<span class=\"token operator\">*</span> v1<span class=\"token punctuation\">;</span><span class=\"token comment\">//rdx</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>v3<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>v3<span class=\"token operator\">&lt;=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>v3<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    p<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    v1 <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指向 0x4052d0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>v3<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        v1<span class=\"token operator\">=</span>v1<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">++</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    newarr<span class=\"token punctuation\">[</span>v3<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image-20220411163341554.png\" alt=\"image-20220411163341554\"></p>\n<p><img data-src=\"C:%5CUsers%5CIkhan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220411164911168.png\" alt=\"image-20220411164911168\"></p>\n<p>认准循环变量，然后找跳转条件，就能很容易的分析出来这段代码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>listnode<span class=\"token operator\">*</span> n <span class=\"token operator\">=</span> newarr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// rbx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>listnode<span class=\"token operator\">*</span> m <span class=\"token operator\">=</span> newarr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//rcx</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>listnode<span class=\"token operator\">*</span> v1 <span class=\"token punctuation\">;</span> <span class=\"token comment\">// rdx </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//rax</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">//rbp</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">&lt;=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    v1<span class=\"token operator\">=</span>newarr<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    m<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    m<span class=\"token operator\">=</span>v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>m<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-></span>value <span class=\"token operator\">&lt;</span>n<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">bomb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    n<span class=\"token operator\">=</span>n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>函数结构分析出来后，就知道这一关考查的是链表的汇编语言实现，我们接着查看链表的结构</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x/100xb 0x4052d0</pre></td></tr></table></figure><p>结果如下</p>\n<p><img data-src=\"image-20220411171156760.png\" alt=\"image-20220411171156760\"></p>\n<p>果然是链表，&lt;nodex&gt; 是 &quot;value&quot; &lt; nodex+8 &gt; 是 &quot;next&quot;.</p>\n<p>自己动手写链表虽然简单但是总归有点麻烦，直接用 IDA PRO</p>\n<p>选中链表节点之后 使用快捷键 <strong>shift+e</strong> 提取</p>\n<p><img data-src=\"image-20220411171627129.png\" alt=\"image-20220411171627129\"></p>\n<p>将分析的得到的 C 语言代码进一步分析就能知道，用户输入的数组 arr [6] 经过计算之后使链表元素按 value 值的降序排列</p>\n<p>上一步又得到了不同节点的 value 值，所以人工排序就能得到处理之后的 arr [6]，又因为之前</p>\n<p><img data-src=\"C:%5CUsers%5CIkhan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220411211412617.png\" alt=\"image-20220411211412617\"></p>\n<p>所以就可以逆向得到用户要输入的正确的数组</p>\n<p>所有的答案就在这里了。</p>\n<blockquote>\n<p>I am not part of the problem. I am a Republican.<br>\n0 1 1 2 3 5<br>\n2 -32 (答案不唯一)<br>\n10 5<br>\n5 115<br>\n6 2 3 4 1 5</p>\n</blockquote>\n<h4 id=\"7隐藏关卡的分析与破解\"><a class=\"anchor\" href=\"#7隐藏关卡的分析与破解\">#</a> 7. 隐藏关卡的分析与破解</h4>\n<p>但是，还有一个问题</p>\n<p><img data-src=\"image-20220411211625334.png\" alt=\"image-20220411211625334\"></p>\n<p>之前查看函数时还有一个<strong> secret_phase</strong>, 但是在整个拆弹过程中也没有发现这个隐藏的炸弹，所以怀疑是有函数调用该隐藏关卡</p>\n<p>继续查看该函数列表，发现与调用隐藏关卡相关的好像只有 <strong>phase_defused</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>disas phase_defused //查看函数汇编代码</pre></td></tr></table></figure><p><img data-src=\"image-20220411212000847.png\" alt=\"image-20220411212000847\"></p>\n<p>函数刚开始做了判断，若接收 6 个字符串则向下跳转，否则函数返回。</p>\n<p>据此可知只有完成所有的六个关卡才能够开启隐藏关</p>\n<p>下面是对 sscanf 函数的调用</p>\n<blockquote>\n<p>int sscanf(const char *str, const char *format, ...)</p>\n<ul>\n<li><strong>str</strong> -- 这是 C 字符串，是函数检索数据的源。</li>\n<li><strong>format</strong> -- 这是 C 字符串，包含了以下各项中的一个或多个：<em>空格字符、非空格字符</em> 和 <em>format 说明符</em>。</li>\n</ul>\n</blockquote>\n<p>一共两个格式化参数。参数 str 为要读取数据的字符串，参数 format 是用户指定的格式</p>\n<p>查看 0x403399 和 0x405870 处的内存</p>\n<p><img data-src=\"image-20220411212810683.png\" alt=\"image-20220411212810683\"></p>\n<p>由此可知需要输入的是 &quot;% d % d % s&quot; 类型的变量，并且是从 input_srings 处读取的</p>\n<p><img data-src=\"image-20220411212928467.png\" alt=\"image-20220411212928467\"></p>\n<p>之后，若成功读入三个参数，则直接跳转</p>\n<p><img data-src=\"image-20220411213017987.png\" alt=\"image-20220411213017987\"></p>\n<p>下面这里就和第一关基本一样，直接查看 0x4033a2 处的值</p>\n<p><img data-src=\"image-20220411213055419.png\" alt=\"image-20220411213055419\"></p>\n<p>就说明第三个参数是这个字符串，</p>\n<p><img data-src=\"image-20220411213218943.png\" alt=\"image-20220411213218943\"></p>\n<p><img data-src=\"image-20220411213225783.png\" alt=\"image-20220411213225783\"></p>\n<p>继续往下看并且查看相应内存的数据之后就知道能够开启隐藏关卡了</p>\n<p>但是还有一个问题是在哪一关输入这个神秘的字符串才能开启隐藏关呢</p>\n<p>上面提到了 sscanf 函数的第一个参数是要读取的字符串的，但是当时查看该参数内存地址时并没有发现有用信息，推测是要在程序启动之后才能知道该内存具体的数值，所以下一步动态调试 phase_defused 函数来查看 sscanf 函数第一个参数的值以及推断在哪一关进入隐藏关卡。按照如下步骤操作，先在 Phase_4 处下断点，然后运行直到断点处，之后再在 phase_defused 函数处下断点，continue 进入 phase_defused 函数，如图</p>\n<p><img data-src=\"image-20220411215256960.png\" alt=\"image-20220411215256960\"><img data-src=\"image-20220411215315483.png\" alt=\"image-20220411215315483\"></p>\n<p>进入 Phase_defused 函数后发现有个关键跳转，就是验证输入字符串的数量是否等于 6，这里我们直接使用 set 命令 &quot;作弊&quot;。</p>\n<p>刚开始是因为看到有 JE 跳转指令，所以我尝试更改 ZF 的值来更改程序运行方向，但是失败了，接着我看到了 cmp 后面是 num_input_strings 的地址，所以我查看了一下，发现数值为 4，也就是说一共输入了 4 次字符串，我尝试直接更改内存里的数据变成 6，但是失败了，所以我直接 set 后面跟变量名，成功了，这里就积累了经验，直接对内存地址进行修改可能会失败，更好的方法就是直接修改变量的值。</p>\n<p><img data-src=\"image-20220411220747138.png\" alt=\"image-20220411220747138\"></p>\n<p><img data-src=\"image-20220411220801465.png\" alt=\"image-20220411220801465\"></p>\n<p><img data-src=\"image-20220411220834541.png\" alt=\"image-20220411220834541\"></p>\n<p>修改完之后单步步过，直到之前的 sscanf 的第一个参数的内存地址，查看之后发现竟是第四关我们输入的密码，所以，就能推断出要在第四关输入密钥才能带我们进入隐藏关卡</p>\n<p><img data-src=\"image-20220411220915578.png\" alt=\"image-20220411220915578\"></p>\n<p>既然已经直到如何进入隐藏关卡，之后就可以破解隐藏关卡了</p>\n<p><img data-src=\"image-20220411222159666.png\" alt=\"image-20220411222159666\"></p>\n<p>直接查看汇编代码，核心函数为 fun7，并且查看 fun7 函数信息</p>\n<p><img data-src=\"image-20220411225455838.png\" alt=\"image-20220411225455838\"></p>\n<p>知道函数接受一个树节点 (rdi)，和一个整数 (rsi)</p>\n<blockquote>\n<p>C 库函数 <strong>int atoi(const char *str)</strong> 把参数 <strong>str</strong> 所指向的字符串转换为一个整数（类型为 int 型）。</p>\n</blockquote>\n<p>这个整数自然就是玩家输入的字符串转变而来，rdi 的初值就可以是树的根节点</p>\n<p>尝试查看二叉树的结构</p>\n<p><img data-src=\"image-20220411225706393.png\" alt=\"image-20220411225706393\"></p>\n<p>很大的一棵树，但是不是很难分析</p>\n<p>接着进入 fun7，发现很像之前一关的递归调用，有了上次的经验，我们就关注于每个条件分支</p>\n<pre><code class=\"language-assembly\">test eax,eax //这种汇编代码段的意义在于判断eax值是否为0或者是否为空\nje [place]\n</code></pre>\n<p>于是就可以得出第一个分支</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接着往下看</p>\n<p><img data-src=\"image-20220411230043389.png\" alt=\"image-20220411230043389\"></p>\n<p>这里首先是将根节点的 value 传给 eax，然后将 eax 与 fun7 的第二个参数比较</p>\n<p>所以就可以根据下面的跳转条件得到其他分支</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fun7</span><span class=\"token punctuation\">(</span>treenode<span class=\"token operator\">*</span> node<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>value<span class=\"token operator\">></span>val<span class=\"token punctuation\">)</span>    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token function\">fun7</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>value<span class=\"token operator\">==</span>val<span class=\"token punctuation\">)</span>     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token function\">fun7</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>right<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>分析完 fun7 之后我们接着回到 secret_phase</p>\n<p>就能继续编写出 secret_phase 的 C 语言代码</p>\n<pre><code class=\"language-C\">void __cdecl secret_phase()\n&#123;\n  char *line; // rax\n  int v1; // ebx\n\n  line = read_line();\n  v1 = atoi(line);\n  if ( (unsigned int)(v1 - 1) &gt; 0x3E8 )\n    explode_bomb();\n  if ( fun7(&amp;n1, v1) != 4 )\n    explode_bomb();\n  puts(&quot;Wow! You've defused the secret stage!&quot;);\n  phase_defused();\n&#125;\n// FROM IDA PRO\n</code></pre>\n<p>至此，我们的分析工作全部完成</p>\n<p><img data-src=\"image-20220411232244001.png\" alt=\"image-20220411232244001\"></p>\n<p>最后根据第四关积累的经验，成功解出隐藏关卡密码 7</p>\n<h4 id=\"end\"><a class=\"anchor\" href=\"#end\">#</a> END</h4>\n<p><img data-src=\"image-20220411232342795.png\" alt=\"image-20220411232342795\"></p>\n<h3 id=\"三收获与心得\"><a class=\"anchor\" href=\"#三收获与心得\">#</a> 三，收获与心得</h3>\n<p>向 CMU 设计该实验的所有老师同学致敬，精密而又有趣的实验总是让人沉浸其中，</p>\n<p>在一次次的解题中不断收获成就感，不断获得新知识，这种强烈的正反馈给了学生兴趣与好奇</p>\n<p>salute ！</p>\n",
            "tags": [
                "CSAPP_LAB"
            ]
        }
    ]
}